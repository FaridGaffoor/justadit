[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar HTTP = Package.http.HTTP;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_cordova.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/autoupdate/autoupdate_cordova.js                               //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nvar autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\"; // The collection of acceptable client versions.\n\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function () {\n  return !!ClientVersions.findOne({\n    _id: 'version-cordova',\n    version: {\n      $ne: autoupdateVersionCordova\n    }\n  });\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function () {\n  var appId = __meteor_runtime_config__.appId;\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError: function (error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      if (Package.reload) {\n        var checkNewVersionDocument = function (doc) {\n          var self = this;\n\n          if (doc.version !== autoupdateVersionCordova) {\n            newVersionAvailable();\n          }\n        };\n\n        var handle = ClientVersions.find({\n          _id: 'version-cordova'\n        }).observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(function () {\n  WebAppLocalServer.onNewVersionReady(function () {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nvar newVersionAvailable = function () {\n  WebAppLocalServer.checkForUpdates();\n};\n/////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/autoupdate/autoupdate_cordova.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_cordova.js"],"names":["autoupdateVersionCordova","__meteor_runtime_config__","ClientVersions","Mongo","Collection","Autoupdate","newClientAvailable","findOne","_id","version","$ne","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","appId","Meteor","subscribe","onError","error","console","log","retryLater","onReady","Package","reload","checkNewVersionDocument","doc","self","newVersionAvailable","handle","find","observe","added","changed","startup","WebAppLocalServer","onNewVersionReady","Reload","_reload","checkForUpdates"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,2BAA2BC,0BAA0BD,wBAA1B,IAAsD,SAArF,C,CAEA;;AACAE,iBAAiB,IAAIC,MAAMC,UAAV,CAAqB,kCAArB,CAAjB;AAEAC,aAAa,EAAb;;AAEAA,WAAWC,kBAAX,GAAgC,YAAW;AACzC,SAAO,CAAC,CAAEJ,eAAeK,OAAf,CAAuB;AAC/BC,SAAK,iBAD0B;AAE/BC,aAAS;AAACC,WAAKV;AAAN;AAFsB,GAAvB,CAAV;AAID,CALD;;AAOA,IAAIW,QAAQ,IAAIC,KAAJ,CAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,YAAU,CATU;AASP;AACbC,eAAa,KAAG,IAVI,CAUC;;AAVD,CAAV,CAAZ;AAYA,IAAIC,WAAW,CAAf;;AAEAV,WAAWW,kBAAX,GAAgC,YAAW;AACzC,MAAIC,QAAQhB,0BAA0BgB,KAAtC;AACAC,SAAOC,SAAP,CAAiB,kCAAjB,EAAqDF,KAArD,EAA4D;AAC1DG,aAAS,UAASC,KAAT,EAAgB;AACvBC,cAAQC,GAAR,CAAY,iCAAZ,EAA+CF,KAA/C;AACAN;AACAJ,YAAMa,UAAN,CAAiBT,QAAjB,EAA2B,YAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,mBAAWW,kBAAX;AACD,OATD;AAUD,KAdyD;AAe1DS,aAAS,YAAW;AAClB,UAAIC,QAAQC,MAAZ,EAAoB;AAClB,YAAIC,0BAA0B,UAASC,GAAT,EAAc;AAC1C,cAAIC,OAAO,IAAX;;AACA,cAAID,IAAIpB,OAAJ,KAAgBT,wBAApB,EAA8C;AAC5C+B;AACD;AACF,SALD;;AAOA,YAAIC,SAAS9B,eAAe+B,IAAf,CAAoB;AAACzB,eAAK;AAAN,SAApB,EAA8C0B,OAA9C,CAAsD;AACjEC,iBAAOP,uBAD0D;AAEjEQ,mBAASR;AAFwD,SAAtD,CAAb;AAID;AACF;AA7ByD,GAA5D;AA+BD,CAjCD;;AAmCAV,OAAOmB,OAAP,CAAe,YAAW;AACxBC,oBAAkBC,iBAAlB,CAAoC,YAAW;AAC7C,QAAIb,QAAQC,MAAZ,EAAoB;AAClBD,cAAQC,MAAR,CAAea,MAAf,CAAsBC,OAAtB;AACD;AACF,GAJD;;AAMApC,aAAWW,kBAAX;AACD,CARD;;AAUA,IAAIe,sBAAsB,YAAW;AACnCO,oBAAkBI,eAAlB;AACD,CAFD,C","file":"/packages/autoupdate.js","sourcesContent":["var autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\";\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function() {\n  return !! ClientVersions.findOne({\n    _id: 'version-cordova',\n    version: {$ne: autoupdateVersionCordova}\n  });\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function() {\n  var appId = __meteor_runtime_config__.appId;\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError: function(error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function() {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function() {\n      if (Package.reload) {\n        var checkNewVersionDocument = function(doc) {\n          var self = this;\n          if (doc.version !== autoupdateVersionCordova) {\n            newVersionAvailable();\n          }\n        };\n\n        var handle = ClientVersions.find({_id: 'version-cordova'}).observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(function() {\n  WebAppLocalServer.onNewVersionReady(function() {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nvar newVersionAvailable = function() {\n  WebAppLocalServer.checkForUpdates();\n}\n"]}}]