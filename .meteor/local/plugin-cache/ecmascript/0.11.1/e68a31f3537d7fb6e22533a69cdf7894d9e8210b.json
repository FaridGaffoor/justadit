{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/farid/Documents/Projects/Meteor/justadit/lib/seller.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"lib/seller.js","filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/seller.js","passPerPreset":false,"envName":"development","cwd":"/Users/farid/Documents/Projects/Meteor/justadit","root":"/Users/farid/Documents/Projects/Meteor/justadit","generatorOpts":{"filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/seller.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/seller.js"}},"code":"Sellers.allow({\n  insert: function (userId, doc) {\n    return doc.userId === userId;\n  },\n  update: function (userId, doc) {\n    return doc.userId === userId;\n  },\n  remove: function (userId, doc) {\n    return doc.userId === userId;\n  }\n});\nMeteor.methods({\n  'getSeller': function (id) {\n    var result = {};\n\n    try {\n      //console.log(\" server find one : \" + id);\n      //loading.start();\n      var SellerResult = Meteor.apply('getProductSeller', [id], {\n        returnStubValue: true\n      }); //console.log(\"Server seller \" );\n\n      if (SellerResult) {\n        //console.log(\"has seller\");\n        result = SellerResult;\n      } else {\n        // console.log(\"has no seller\");\n        result = {\n          _id: \"\",\n          userId: Meteor.userId(),\n          businessname: \"\",\n          busTagLine: \"\",\n          busLogo: \"\",\n          busAvatar: \"\",\n          bustel: \"\",\n          buscel: \"\",\n          busemail: \"\",\n          cont1: \"\",\n          cont2: \"\",\n          add1: \"\",\n          add2: \"\",\n          add3: \"\",\n          add4: \"\",\n          add5: \"\",\n          website: \"\"\n        };\n      } //loading.stop();\n\n    } catch (exp) {\n      //loading.halt();\n      throw exp;\n    } //console.log(result);\n\n\n    return result;\n  },\n  'newSeller': function (sellerObj) {\n    // var result = Products.find({_id:prodid});\n    try {\n      var sellerResult = Sellers.upsert({\n        // Selector\n        userId: sellerObj.userId\n      }, {\n        // Modifier\n        $set: {\n          businessname: sellerObj.businessname,\n          busTagLine: sellerObj.busTagLine,\n          busLogo: sellerObj.busLogo,\n          busAvatar: sellerObj.busAvatar,\n          bustel: sellerObj.bustel,\n          buscel: sellerObj.buscel,\n          busemail: sellerObj.busemail,\n          cont1: sellerObj.cont1,\n          cont2: sellerObj.cont2,\n          add1: sellerObj.add1,\n          add2: sellerObj.add2,\n          add3: sellerObj.add3,\n          add4: sellerObj.add4,\n          add5: sellerObj.add5,\n          website: sellerObj.website\n        }\n      }); //console.log(sellerResult);\n      //return Sellers.insert(sellerObj);\n    } catch (error) {\n      console.log(\"Server - Seller - \" + error);\n      throw error;\n    }\n  },\n  'updateSeller': function (sellerObj) {\n    // var result = Products.find({_id:prodid});\n    return Sellers.findOne({\n      userId: prodid\n    });\n  },\n  'deleteSeller': function (id) {\n    // var result = Products.find({_id:prodid});\n    return Sellers.remove({\n      userId: id\n    });\n  }\n});\n\nSellers.allSellers = function () {\n  return Sellers.find({});\n};\n\nSellers.more = function (continuationValue) {\n  //https://www.npmjs.com/package/mongo-cursor-pagination\n  return Sellers.find({}, {\n    sort: {\n      date: -1\n    }\n  });\n};\n/*\nMeteor.methods({\n  createActivity: function(activity, tweet, loc) {\n    Meteor.userId(), String,\n    activity, {\n      recipeName: String,\n      text: String,\n      image: String\n    },\n    tweet, Boolean,\n    loc, Match.OneOf(Object, null),\n    \n    activity.userId = Meteor.userId(,\n    activity.userAvatar = Meteor.user().services.twitter.profile_image_url_https;\n    activity.userName = Meteor.user().profile.name;\n    activity.date = new Date;\n    \n    if (! this.isSimulation && loc)\n      activity.place = getLocationPlace(loc,\n    \n    var id = Activities.insert(activity,\n    \n    if (! this.isSimulation && tweet)\n      tweetActivity(activity,\n    \n    return id;\n  }\n},\n\nif (Meteor.isServer) {\n  var twitterOauth = function(options) {\n    var config = Meteor.settings.twitter\n    var userConfig = Meteor.user().services.twitter;\n\n    return {\n      consumer_key: config.consumerKey,\n      consumer_secret: config.secret,\n      token: userConfig.accessToken,\n      token_secret: userConfig.accessTokenSecret\n    };\n  }\n  \n  var tweetActivity = function(activity) {\n    // creates the tweet text, optionally truncating to fit the appended text\n    function appendTweet(text, append) {\n      var MAX = 117; // Max size of tweet with image attached\n      \n      if ((text + append).length > MAX)\n        return text.substring(0, (MAX - append.length - 3)) + '...' + append;\n      else\n        return text + append;\n    }\n    \n    // we need to strip the \"data:image/jpeg;base64,\" bit off the data url\n    var image = activity.image.replace(/^data.*base64,/, '',\n\n    var response = HTTP.post(\n      'https://upload.twitter.com/1.1/media/upload.json', {\n        params: { media: image },\n        npmRequestOptions: { oauth: twitterOauth() }\n      }\n    ,\n    \n    if (response.statusCode !== 200)\n      throw new Meteor.Error(500, 'Unable to post image to twitter',\n\n    if (! response.data)\n      throw new Meteor.Error(500, 'Did not receive attachment from twitter',\n\n    var attachment = response.data;\n\n    response = HTTP.post(\n      'https://api.twitter.com/1.1/statuses/update.json', {\n        params: {\n          status: appendTweet(activity.text, ' #localmarket'),\n          media_ids: attachment.media_id_string\n        },\n        npmRequestOptions: { oauth: twitterOauth() }\n      }\n    ,\n\n    if (response.statusCode !== 200)\n      throw new Meteor.Error(500, 'Unable to create tweet',\n  }\n  \n  var getLocationPlace = function(loc) {\n    var url = 'https://api.twitter.com/1.1/geo/reverse_geocode.json'\n      + '?granularity=neighborhood'\n      + '&max_results=1'\n      + '&accuracy=' + loc.coords.accuracy\n      + '&lat=' + loc.coords.latitude\n      + '&long=' + loc.coords.longitude;\n    \n    var response = HTTP.get(url,\n                            {npmRequestOptions: { oauth: twitterOauth() } },\n\n    if (response.statusCode === 200 && response.data) {\n      var place = _.find(response.data.result.places, function(place) {\n        return place.place_type === 'neighborhood';\n      },\n      \n      return place && place.full_name;\n    }\n  }\n}\n \n*/","map":{"version":3,"sources":["lib/seller.js"],"names":["Sellers","allow","insert","userId","doc","update","remove","Meteor","methods","id","result","SellerResult","apply","returnStubValue","_id","businessname","busTagLine","busLogo","busAvatar","bustel","buscel","busemail","cont1","cont2","add1","add2","add3","add4","add5","website","exp","sellerObj","sellerResult","upsert","$set","error","console","log","findOne","prodid","allSellers","find","more","continuationValue","sort","date"],"mappings":"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","sourcesContent":[" \n\nSellers.allow({\n    insert: function(userId, doc) {\n      return doc.userId === userId;\n    },\n    update: function(userId,doc){\n      return doc.userId === userId;\n    },\n    remove: function(userId, doc) {\n        return doc.userId === userId;\n      }\n  });\n  \n \n  Meteor.methods({\n    'getSeller':function(id){\n      var result={};\n      try\n      {\n        //console.log(\" server find one : \" + id);\n        //loading.start();\n        var SellerResult = Meteor.apply('getProductSeller',[id],{returnStubValue: true});\n       \n         //console.log(\"Server seller \" );\n \n        if (SellerResult)\n        {\n          //console.log(\"has seller\");\n          result=SellerResult;\n        \n        }\n        else\n\n        {\n         // console.log(\"has no seller\");\n          result  = {\n            _id:\"\",\n             userId:Meteor.userId(),\n             businessname : \"\",\n             busTagLine: \"\",\n             busLogo: \"\",\n             busAvatar: \"\",\n             bustel: \"\",\n             buscel: \"\",\n             busemail: \"\",\n             cont1 : \"\",\n             cont2 : \"\",\n             add1: \"\",\n             add2: \"\",\n             add3: \"\",\n             add4: \"\",\n             add5: \"\",\n             website: \"\"\n  \n            }\n             \n        }\n        //loading.stop();\n      }\n      catch (exp)\n      {\n        //loading.halt();\n          throw exp;\n      }\n      //console.log(result);\n      return result;\n      \n    },\n   \n    'newSeller':function(sellerObj){\n     // var result = Products.find({_id:prodid});\n      \n     try {\n \n    \n\n      \n     var sellerResult = \n     Sellers.upsert({\n      // Selector\n      userId: sellerObj.userId \n        }, {\n      // Modifier\n      $set: {\n        businessname : sellerObj.businessname,\n        busTagLine: sellerObj.busTagLine,\n        busLogo : sellerObj.busLogo,\n        busAvatar : sellerObj.busAvatar,\n        bustel : sellerObj.bustel,\n        buscel : sellerObj.buscel,\n        busemail : sellerObj.busemail,\n        cont1 : sellerObj.cont1,\n        cont2 : sellerObj.cont2,\n        add1 : sellerObj.add1,\n        add2 : sellerObj.add2,\n        add3 : sellerObj.add3,\n        add4 : sellerObj.add4,\n        add5 : sellerObj.add5,\n        website : sellerObj.website\n      }\n      });\n       \n    //console.log(sellerResult);\n\n      //return Sellers.insert(sellerObj);\n      \n     } catch (error) {\n        \n       console.log(\"Server - Seller - \" + error);\n       throw error;\n     }\n     \n      \n    },\n    \n    'updateSeller':function(sellerObj){\n        // var result = Products.find({_id:prodid});\n         return Sellers.findOne({userId:prodid});\n    },\n    'deleteSeller':function(id){\n        // var result = Products.find({_id:prodid});\n         return Sellers.remove({userId:id});\n    }\n    \n  });\n\n    \n\n  Sellers.allSellers= function(){\n      return Sellers.find({});\n  }\n\n  Sellers.more = function(continuationValue){\n      //https://www.npmjs.com/package/mongo-cursor-pagination\n      return Sellers.find({}, {sort: {date: -1}});\n    \n  } \n\n   \n  /*\n  Meteor.methods({\n    createActivity: function(activity, tweet, loc) {\n      Meteor.userId(), String,\n      activity, {\n        recipeName: String,\n        text: String,\n        image: String\n      },\n      tweet, Boolean,\n      loc, Match.OneOf(Object, null),\n      \n      activity.userId = Meteor.userId(,\n      activity.userAvatar = Meteor.user().services.twitter.profile_image_url_https;\n      activity.userName = Meteor.user().profile.name;\n      activity.date = new Date;\n      \n      if (! this.isSimulation && loc)\n        activity.place = getLocationPlace(loc,\n      \n      var id = Activities.insert(activity,\n      \n      if (! this.isSimulation && tweet)\n        tweetActivity(activity,\n      \n      return id;\n    }\n  },\n  \n  if (Meteor.isServer) {\n    var twitterOauth = function(options) {\n      var config = Meteor.settings.twitter\n      var userConfig = Meteor.user().services.twitter;\n  \n      return {\n        consumer_key: config.consumerKey,\n        consumer_secret: config.secret,\n        token: userConfig.accessToken,\n        token_secret: userConfig.accessTokenSecret\n      };\n    }\n    \n    var tweetActivity = function(activity) {\n      // creates the tweet text, optionally truncating to fit the appended text\n      function appendTweet(text, append) {\n        var MAX = 117; // Max size of tweet with image attached\n        \n        if ((text + append).length > MAX)\n          return text.substring(0, (MAX - append.length - 3)) + '...' + append;\n        else\n          return text + append;\n      }\n      \n      // we need to strip the \"data:image/jpeg;base64,\" bit off the data url\n      var image = activity.image.replace(/^data.*base64,/, '',\n  \n      var response = HTTP.post(\n        'https://upload.twitter.com/1.1/media/upload.json', {\n          params: { media: image },\n          npmRequestOptions: { oauth: twitterOauth() }\n        }\n      ,\n      \n      if (response.statusCode !== 200)\n        throw new Meteor.Error(500, 'Unable to post image to twitter',\n  \n      if (! response.data)\n        throw new Meteor.Error(500, 'Did not receive attachment from twitter',\n  \n      var attachment = response.data;\n  \n      response = HTTP.post(\n        'https://api.twitter.com/1.1/statuses/update.json', {\n          params: {\n            status: appendTweet(activity.text, ' #localmarket'),\n            media_ids: attachment.media_id_string\n          },\n          npmRequestOptions: { oauth: twitterOauth() }\n        }\n      ,\n  \n      if (response.statusCode !== 200)\n        throw new Meteor.Error(500, 'Unable to create tweet',\n    }\n    \n    var getLocationPlace = function(loc) {\n      var url = 'https://api.twitter.com/1.1/geo/reverse_geocode.json'\n        + '?granularity=neighborhood'\n        + '&max_results=1'\n        + '&accuracy=' + loc.coords.accuracy\n        + '&lat=' + loc.coords.latitude\n        + '&long=' + loc.coords.longitude;\n      \n      var response = HTTP.get(url,\n                              {npmRequestOptions: { oauth: twitterOauth() } },\n  \n      if (response.statusCode === 200 && response.data) {\n        var place = _.find(response.data.result.places, function(place) {\n          return place.place_type === 'neighborhood';\n        },\n        \n        return place && place.full_name;\n      }\n    }\n  }\n   \n  */"]},"sourceType":"script","hash":"e68a31f3537d7fb6e22533a69cdf7894d9e8210b"}
