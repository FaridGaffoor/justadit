{"version":3,"sources":["meteor://ðŸ’»app/packages/xyz:loading/loading.js"],"names":["module","export","Loading","Spinner","watch","require","v","refreshLoading","userOptions","running","options","Object","create","lines","length","width","radius","scale","corners","color","opacity","rotate","direction","speed","trail","fps","zIndex","className","top","left","shadow","hwaccel","position","elementSelector","_","extend","spinner","start","spin","document","querySelector","stop","halt","wrapAsync","func","context","self","loadingWrapper","callback","Meteor","meteorWrapped","toWrap","call","stopLoading","refresh","keepOptions","newOptions","noOverrideGlobal","opts","clone","newLoading","configure","newOpts","args","name","methodArgs","slice","apply","pop","bind"],"mappings":"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","file":"/packages/xyz_loading.js","sourcesContent":["import Spinner from 'spin.js'\n\nexport let Loading = refreshLoading();\n\nfunction refreshLoading(userOptions) {\n  let running = 0;\n  const options = Object.create({\n            lines: 13 // The number of lines to draw\n          , length: 28 // The length of each line\n          , width: 14 // The line thickness\n          , radius: 42 // The radius of the inner circle\n          , scale: 1 // Scales overall size of the spinner\n          , corners: 1 // Corner roundness (0..1)\n          , color: '#000' // #rgb or #rrggbb or array of colors\n          , opacity: 0.25 // Opacity of the lines\n          , rotate: 0 // The rotation offset\n          , direction: 1 // 1: clockwise, -1: counterclockwise\n          , speed: 1 // Rounds per second\n          , trail: 60 // Afterglow percentage\n          , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\n          , zIndex: 2e9 // The z-index (defaults to 2000000000)\n          , className: 'spinner'  // The CSS class to assign to the spinner\n          , top: '50%' // Top position relative to parent\n          , left: '50%' // Left position relative to parent\n          , shadow: false // Whether to render a shadow\n          , hwaccel: false // Whether to use hardware acceleration\n          , position: 'absolute' // Element positioning\n\n          // options specific to this package:\n          , elementSelector: 'body' // A selector for the target of\n        });\n\n  _.extend(options, userOptions);\n\n  return {\n    options,\n\n    // The spinner is only created at the invocation of `start`,\n    // allowing the options to be modified before it is started.\n    spinner: null,\n\n    start () {\n      running++; // `running` is a closure variable\n      if (running > 1) return this;\n      if (!this.spinner) {\n        this.spinner = new Spinner(this.options).spin(\n          document.querySelector(this.options.elementSelector)\n        );\n      }\n\n      return this;\n    },\n    stop () {\n      if (!this.spinner) return this;\n\n      running--; // `running` is a closure variable\n      if (running === 0) {\n        this.halt();\n      }\n      return this;\n    },\n    wrapAsync (func, context) {\n      const self = this;\n      return function loadingWrapper(callback){\n        self.start();\n        return Meteor.wrapAsync(function meteorWrapped(toWrap){\n          func.call(this, function stopLoading (...args) {\n            self.stop();\n            toWrap(...args);\n          });\n        }, context)(callback);\n      };\n    },\n    halt () {\n      if (this.spinner) this.spinner.stop();\n      this.spinner = null;\n      running = 0; // `running` is a closure variable\n\n      return this;\n    },\n    refresh (keepOptions, newOptions, noOverrideGlobal) {\n      let opts;\n\n      if (keepOptions) {\n        opts = _.clone(this.options);\n      } else {\n        opts = {};\n      }\n      _.extend(opts, newOptions);\n\n      const newLoading = refreshLoading(opts);\n\n      if (!noOverrideGlobal) {\n        this.halt();\n\n        Loading = newLoading;\n      }\n      return newLoading;\n    },\n    configure (opts) {\n      _.extend(this.options, opts);\n      return this;\n    },\n    clone (newOpts) {\n      const opts = _.extend({ position: 'relative' }, newOpts);\n      return this.refresh(true, opts, true);\n    },\n    call (...args) {\n      const name = args[0],\n            callback = args[args.length - 1],\n            methodArgs = args.slice(1, -1);\n      return this.apply(name, methodArgs, {}, callback);\n    },\n    apply (...args) {\n      const callback = args.pop();\n      return this.wrapAsync(Meteor.apply.bind(Meteor, ...args), Meteor)(callback);\n    }\n  };\n};\n"]}