{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/farid/Documents/Projects/Meteor/justadit/lib/media.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"lib/media.js","filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/media.js","passPerPreset":false,"envName":"development","cwd":"/Users/farid/Documents/Projects/Meteor/justadit","root":"/Users/farid/Documents/Projects/Meteor/justadit","generatorOpts":{"filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/media.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/media.js"}},"code":"console.log(\"Server create FS Media Collection\"); //var imageStore = new FS.Store.GridFS(\"images\", {\n//mongoUrl: 'mongodb://127.0.0.1:3001/justadit/', // optional, defaults to Meteor's local MongoDB\n//mongoOptions: {...},  // optional, see note below\n//transformWrite: myTransformWriteFunction, //optional\n//transformRead: myTransformReadFunction, //optional\n//maxTries: 1, // optional, default 5\n//chunkSize: 1024*1024  // optional, default GridFS chunk size in bytes (can be overridden per file).\n// Default: 2MB. Reasonable range: 512KB - 4MB\n//  });\n\nvar imageStore = new FS.Store.FileSystem(\"images\", {\n  path: \"/var/www/justaditimages/\",\n  //optional, default is \"/cfs/files\" path within app container\n  //transformWrite: function(fileObj, readStream, writeStream) {\n  //console.log(\"Resize Image\");\n  //console.log(fileObj.name() + \" : \"  + fileObj.size());\n  // if (fileObj.size() > 500)\n  // {\n  //     if (gm.isAvailable)\n  //     {\n  //         gm(readStream, fileObj.name()).resize('500').stream().pipe(writeStream);\n  //     }\n  //     else\n  //     {\n  //         console.log(\"No GraphicsMagick Installed.\")\n  //     }\n  // }\n  //},\n  chunkSize: 2 * 1024 * 1024 - 1024,\n  // optional, default GridFS chunk size in bytes (can be overridden per file).\n  //Default: 2MB,//. Reasonable range: 512KB - 4MB\n  //transformWrite: myTransformWriteFunction, //optional\n  //transformRead: myTransformReadFunction, //optional\n  maxTries: 2 //optional, default 5\n\n}); //   var videoStore = new FS.Store.GridFS(\"videos\", {\n//     //mongoUrl: 'mongodb://127.0.0.1:3001/justaditmedia/', // optional, defaults to Meteor's local MongoDB\n//     //mongoOptions: {...},  // optional, see note below\n//     //transformWrite: myTransformWriteFunction, //optional\n//     //transformRead: myTransformReadFunction, //optional\n//     //maxTries: 1, // optional, default 5\n//     //chunkSize: 1024*1024  // optional, default GridFS chunk size in bytes (can be overridden per file).\n//                           // Default: 2MB. Reasonable range: 512KB - 4MB\n//   });\n\nImages = new FS.Collection(\"images\", {\n  stores: [imageStore]\n}); // Videos = new FS.Collection(\"videos\", {\n//   stores: [videoStore]\n// // });\n\nImages.allow({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  },\n  download: function () {\n    return true;\n  }\n}); // Videos.allow({ \n//     insert: function() { \n//         return true; \n//     }, \n//     update: function() { \n//         return true; \n//     }, \n//     remove: function() { \n//         return true; \n//     } \n// });\n\nMeteor.methods({\n  getProductImages: function (ImgId) {\n    // var result = Products.find({_id:prodid});\n    var prodImages = Images.find({\n      ImageId: ImgId\n    });\n    var returnImages = [];\n    prodImages.forEach(function (element) {\n      returnImages.push(element);\n    }); //var sell = Meteor.apply('getProductSeller', [prod.sellerId], { returnStubValue: true });\n    //prod.seller = sell;\n\n    return returnImages; //return Meteor.Mongo.Products.findOne({_id:prodid});\n  }\n});","map":{"version":3,"sources":["lib/media.js"],"names":["console","log","imageStore","FS","Store","FileSystem","path","chunkSize","maxTries","Images","Collection","stores","allow","insert","update","remove","download","Meteor","methods","getProductImages","ImgId","prodImages","find","ImageId","returnImages","forEach","push","element"],"mappings":"AAAAA,QAAQC,GAAR,CAAY,mCAAZ,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,IAAIC,GAAGC,KAAH,CAASC,UAAb,CAAwB,QAAxB,EAAkC;AAC/CC,QAAM,0BADyC;AACb;AAClC;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACAC,aAAW,IAAE,IAAF,GAAO,IAAP,GAAc,IAjBsB;AAiBf;AAChC;AACA;AACA;AACAC,YAAU,CArBqC,CAqBnC;;AArBmC,CAAlC,CAAjB,C,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,SAAS,IAAIN,GAAGO,UAAP,CAAkB,QAAlB,EAA4B;AACjCC,UAAQ,CAACT,UAAD;AADyB,CAA5B,CAAT,C,CAKA;AACA;AACA;;AAGAO,OAAOG,KAAP,CAAa;AACTC,UAAQ,YAAY;AAChB,WAAO,IAAP;AACH,GAHQ;AAITC,UAAQ,YAAY;AAChB,WAAO,IAAP;AACH,GANQ;AAOTC,UAAQ,YAAY;AAChB,WAAO,IAAP;AACH,GATQ;AAUTC,YAAU,YAAY;AAClB,WAAO,IAAP;AACH;AAZQ,CAAb,E,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAC,OAAOC,OAAP,CAAe;AACXC,oBAAkB,UAAUC,KAAV,EAAiB;AAE/B;AACA,QAAIC,aAAaZ,OAAOa,IAAP,CAAY;AAAEC,eAASH;AAAX,KAAZ,CAAjB;AACA,QAAII,eAAe,EAAnB;AACAH,eAAWI,OAAX,CAAmB,mBAAW;AAC1BD,mBAAaE,IAAb,CAAkBC,OAAlB;AAEH,KAHD,EAL+B,CAS/B;AACA;;AACA,WAAOH,YAAP,CAX+B,CAa/B;AACH;AAfU,CAAf","sourcesContent":["console.log(\"Server create FS Media Collection\");\n\n//var imageStore = new FS.Store.GridFS(\"images\", {\n//mongoUrl: 'mongodb://127.0.0.1:3001/justadit/', // optional, defaults to Meteor's local MongoDB\n//mongoOptions: {...},  // optional, see note below\n//transformWrite: myTransformWriteFunction, //optional\n//transformRead: myTransformReadFunction, //optional\n//maxTries: 1, // optional, default 5\n//chunkSize: 1024*1024  // optional, default GridFS chunk size in bytes (can be overridden per file).\n// Default: 2MB. Reasonable range: 512KB - 4MB\n//  });\nvar imageStore = new FS.Store.FileSystem(\"images\", {\n    path: \"/var/www/justaditimages/\", //optional, default is \"/cfs/files\" path within app container\n    //transformWrite: function(fileObj, readStream, writeStream) {\n        //console.log(\"Resize Image\");\n        //console.log(fileObj.name() + \" : \"  + fileObj.size());\n        // if (fileObj.size() > 500)\n        // {\n        //     if (gm.isAvailable)\n        //     {\n        //         gm(readStream, fileObj.name()).resize('500').stream().pipe(writeStream);\n        //     }\n        //     else\n        //     {\n        //         console.log(\"No GraphicsMagick Installed.\")\n        //     }\n        // }\n    //},\n    chunkSize: 2*1024*1024 - 1024,  // optional, default GridFS chunk size in bytes (can be overridden per file).\n    //Default: 2MB,//. Reasonable range: 512KB - 4MB\n    //transformWrite: myTransformWriteFunction, //optional\n    //transformRead: myTransformReadFunction, //optional\n    maxTries: 2 //optional, default 5\n});\n//   var videoStore = new FS.Store.GridFS(\"videos\", {\n//     //mongoUrl: 'mongodb://127.0.0.1:3001/justaditmedia/', // optional, defaults to Meteor's local MongoDB\n//     //mongoOptions: {...},  // optional, see note below\n//     //transformWrite: myTransformWriteFunction, //optional\n//     //transformRead: myTransformReadFunction, //optional\n//     //maxTries: 1, // optional, default 5\n//     //chunkSize: 1024*1024  // optional, default GridFS chunk size in bytes (can be overridden per file).\n//                           // Default: 2MB. Reasonable range: 512KB - 4MB\n//   });\n\nImages = new FS.Collection(\"images\", {\n    stores: [imageStore]\n});\n\n\n// Videos = new FS.Collection(\"videos\", {\n//   stores: [videoStore]\n// // });\n\n\nImages.allow({\n    insert: function () {\n        return true;\n    },\n    update: function () {\n        return true;\n    },\n    remove: function () {\n        return true;\n    },\n    download: function () {\n        return true;\n    }\n});\n\n// Videos.allow({ \n//     insert: function() { \n//         return true; \n//     }, \n//     update: function() { \n//         return true; \n//     }, \n//     remove: function() { \n//         return true; \n//     } \n// });\n\n\nMeteor.methods({\n    getProductImages: function (ImgId) {\n \n        // var result = Products.find({_id:prodid});\n        var prodImages = Images.find({ ImageId: ImgId });\n        var returnImages = [];\n        prodImages.forEach(element => {\n            returnImages.push(element);\n\n        });\n        //var sell = Meteor.apply('getProductSeller', [prod.sellerId], { returnStubValue: true });\n        //prod.seller = sell;\n        return returnImages;\n\n        //return Meteor.Mongo.Products.findOne({_id:prodid});\n    },\n});"]},"sourceType":"script","hash":"7a1a1fd851fdc0aa5174e3e61ace94ec48090d1d"}
