[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Loading;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"xyz:loading\":{\"loading.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/xyz_loading/loading.js                                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  Loading: function () {\n    return Loading;\n  }\n});\nvar Spinner;\nmodule.watch(require(\"spin.js\"), {\n  \"default\": function (v) {\n    Spinner = v;\n  }\n}, 0);\nvar Loading = refreshLoading();\n\nfunction refreshLoading(userOptions) {\n  var running = 0;\n  var options = Object.create({\n    lines: 13 // The number of lines to draw\n    ,\n    length: 28 // The length of each line\n    ,\n    width: 14 // The line thickness\n    ,\n    radius: 42 // The radius of the inner circle\n    ,\n    scale: 1 // Scales overall size of the spinner\n    ,\n    corners: 1 // Corner roundness (0..1)\n    ,\n    color: '#000' // #rgb or #rrggbb or array of colors\n    ,\n    opacity: 0.25 // Opacity of the lines\n    ,\n    rotate: 0 // The rotation offset\n    ,\n    direction: 1 // 1: clockwise, -1: counterclockwise\n    ,\n    speed: 1 // Rounds per second\n    ,\n    trail: 60 // Afterglow percentage\n    ,\n    fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\n    ,\n    zIndex: 2e9 // The z-index (defaults to 2000000000)\n    ,\n    className: 'spinner' // The CSS class to assign to the spinner\n    ,\n    top: '50%' // Top position relative to parent\n    ,\n    left: '50%' // Left position relative to parent\n    ,\n    shadow: false // Whether to render a shadow\n    ,\n    hwaccel: false // Whether to use hardware acceleration\n    ,\n    position: 'absolute' // Element positioning\n    // options specific to this package:\n    ,\n    elementSelector: 'body' // A selector for the target of\n\n  });\n\n  _.extend(options, userOptions);\n\n  return {\n    options: options,\n    // The spinner is only created at the invocation of `start`,\n    // allowing the options to be modified before it is started.\n    spinner: null,\n    start: function () {\n      running++; // `running` is a closure variable\n\n      if (running > 1) return this;\n\n      if (!this.spinner) {\n        this.spinner = new Spinner(this.options).spin(document.querySelector(this.options.elementSelector));\n      }\n\n      return this;\n    },\n    stop: function () {\n      if (!this.spinner) return this;\n      running--; // `running` is a closure variable\n\n      if (running === 0) {\n        this.halt();\n      }\n\n      return this;\n    },\n    wrapAsync: function (func, context) {\n      var self = this;\n      return function () {\n        function loadingWrapper(callback) {\n          self.start();\n          return Meteor.wrapAsync(function () {\n            function meteorWrapped(toWrap) {\n              func.call(this, function () {\n                function stopLoading() {\n                  self.stop();\n                  toWrap.apply(void 0, arguments);\n                }\n\n                return stopLoading;\n              }());\n            }\n\n            return meteorWrapped;\n          }(), context)(callback);\n        }\n\n        return loadingWrapper;\n      }();\n    },\n    halt: function () {\n      if (this.spinner) this.spinner.stop();\n      this.spinner = null;\n      running = 0; // `running` is a closure variable\n\n      return this;\n    },\n    refresh: function (keepOptions, newOptions, noOverrideGlobal) {\n      var opts;\n\n      if (keepOptions) {\n        opts = _.clone(this.options);\n      } else {\n        opts = {};\n      }\n\n      _.extend(opts, newOptions);\n\n      var newLoading = refreshLoading(opts);\n\n      if (!noOverrideGlobal) {\n        this.halt();\n        module.runSetters(Loading = newLoading);\n      }\n\n      return newLoading;\n    },\n    configure: function (opts) {\n      _.extend(this.options, opts);\n\n      return this;\n    },\n    clone: function (newOpts) {\n      var opts = _.extend({\n        position: 'relative'\n      }, newOpts);\n\n      return this.refresh(true, opts, true);\n    },\n    call: function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var name = args[0],\n          callback = args[args.length - 1],\n          methodArgs = args.slice(1, -1);\n      return this.apply(name, methodArgs, {}, callback);\n    },\n    apply: function () {\n      var _Meteor$apply;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var callback = args.pop();\n      return this.wrapAsync((_Meteor$apply = Meteor.apply).bind.apply(_Meteor$apply, [Meteor].concat(args)), Meteor)(callback);\n    }\n  };\n}\n\n;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"spin.js\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/xyz_loading/node_modules/spin.js/package.json                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"spin.js\";\nexports.version = \"2.3.2\";\nexports.main = \"spin.js\";\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"spin.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/xyz_loading/node_modules/spin.js/spin.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**\n * Copyright (c) 2011-2014 Felix Gnass\n * Licensed under the MIT license\n * http://spin.js.org/\n *\n * Example:\n    var opts = {\n      lines: 12             // The number of lines to draw\n    , length: 7             // The length of each line\n    , width: 5              // The line thickness\n    , radius: 10            // The radius of the inner circle\n    , scale: 1.0            // Scales overall size of the spinner\n    , corners: 1            // Roundness (0..1)\n    , color: '#000'         // #rgb or #rrggbb\n    , opacity: 1/4          // Opacity of the lines\n    , rotate: 0             // Rotation offset\n    , direction: 1          // 1: clockwise, -1: counterclockwise\n    , speed: 1              // Rounds per second\n    , trail: 100            // Afterglow percentage\n    , fps: 20               // Frames per second when using setTimeout()\n    , zIndex: 2e9           // Use a high z-index by default\n    , className: 'spinner'  // CSS class to assign to the element\n    , top: '50%'            // center vertically\n    , left: '50%'           // center horizontally\n    , shadow: false         // Whether to render a shadow\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n    , position: 'absolute'  // Element positioning\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n */\n;(function (root, factory) {\n\n  /* CommonJS */\n  if (typeof module == 'object' && module.exports) module.exports = factory()\n\n  /* AMD module */\n  else if (typeof define == 'function' && define.amd) define(factory)\n\n  /* Browser global */\n  else root.Spinner = factory()\n}(this, function () {\n  \"use strict\"\n\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\n    , animations = {} /* Animation rules keyed by their name */\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */\n\n  /**\n   * Utility function to create elements. If no tag name is given,\n   * a DIV is created. Optionally properties can be passed.\n   */\n  function createEl (tag, prop) {\n    var el = document.createElement(tag || 'div')\n      , n\n\n    for (n in prop) el[n] = prop[n]\n    return el\n  }\n\n  /**\n   * Appends children and returns the parent.\n   */\n  function ins (parent /* child1, child2, ...*/) {\n    for (var i = 1, n = arguments.length; i < n; i++) {\n      parent.appendChild(arguments[i])\n    }\n\n    return parent\n  }\n\n  /**\n   * Creates an opacity keyframe animation rule and returns its name.\n   * Since most mobile Webkits have timing issues with animation-delay,\n   * we create separate rules for each line/segment.\n   */\n  function addAnimation (alpha, trail, i, lines) {\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\n      , start = 0.01 + i/lines * 100\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\n      , pre = prefix && '-' + prefix + '-' || ''\n\n    if (!animations[name]) {\n      sheet.insertRule(\n        '@' + pre + 'keyframes ' + name + '{' +\n        '0%{opacity:' + z + '}' +\n        start + '%{opacity:' + alpha + '}' +\n        (start+0.01) + '%{opacity:1}' +\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\n        '100%{opacity:' + z + '}' +\n        '}', sheet.cssRules.length)\n\n      animations[name] = 1\n    }\n\n    return name\n  }\n\n  /**\n   * Tries various vendor prefixes and returns the first supported property.\n   */\n  function vendor (el, prop) {\n    var s = el.style\n      , pp\n      , i\n\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\n    if (s[prop] !== undefined) return prop\n    for (i = 0; i < prefixes.length; i++) {\n      pp = prefixes[i]+prop\n      if (s[pp] !== undefined) return pp\n    }\n  }\n\n  /**\n   * Sets multiple style properties at once.\n   */\n  function css (el, prop) {\n    for (var n in prop) {\n      el.style[vendor(el, n) || n] = prop[n]\n    }\n\n    return el\n  }\n\n  /**\n   * Fills in default values.\n   */\n  function merge (obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var def = arguments[i]\n      for (var n in def) {\n        if (obj[n] === undefined) obj[n] = def[n]\n      }\n    }\n    return obj\n  }\n\n  /**\n   * Returns the line color from the given string or array.\n   */\n  function getColor (color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length]\n  }\n\n  // Built-in defaults\n\n  var defaults = {\n    lines: 12             // The number of lines to draw\n  , length: 7             // The length of each line\n  , width: 5              // The line thickness\n  , radius: 10            // The radius of the inner circle\n  , scale: 1.0            // Scales overall size of the spinner\n  , corners: 1            // Roundness (0..1)\n  , color: '#000'         // #rgb or #rrggbb\n  , opacity: 1/4          // Opacity of the lines\n  , rotate: 0             // Rotation offset\n  , direction: 1          // 1: clockwise, -1: counterclockwise\n  , speed: 1              // Rounds per second\n  , trail: 100            // Afterglow percentage\n  , fps: 20               // Frames per second when using setTimeout()\n  , zIndex: 2e9           // Use a high z-index by default\n  , className: 'spinner'  // CSS class to assign to the element\n  , top: '50%'            // center vertically\n  , left: '50%'           // center horizontally\n  , shadow: false         // Whether to render a shadow\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n  , position: 'absolute'  // Element positioning\n  }\n\n  /** The constructor */\n  function Spinner (o) {\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\n  }\n\n  // Global defaults that override the built-ins:\n  Spinner.defaults = {}\n\n  merge(Spinner.prototype, {\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target b calling\n     * stop() internally.\n     */\n    spin: function (target) {\n      this.stop()\n\n      var self = this\n        , o = self.opts\n        , el = self.el = createEl(null, {className: o.className})\n\n      css(el, {\n        position: o.position\n      , width: 0\n      , zIndex: o.zIndex\n      , left: o.left\n      , top: o.top\n      })\n\n      if (target) {\n        target.insertBefore(el, target.firstChild || null)\n      }\n\n      el.setAttribute('role', 'progressbar')\n      self.lines(el, self.opts)\n\n      if (!useCssAnimations) {\n        // No CSS animation support, use setTimeout() instead\n        var i = 0\n          , start = (o.lines - 1) * (1 - o.direction) / 2\n          , alpha\n          , fps = o.fps\n          , f = fps / o.speed\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)\n          , astep = f / o.lines\n\n        ;(function anim () {\n          i++\n          for (var j = 0; j < o.lines; j++) {\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\n\n            self.opacity(el, j * o.direction + start, alpha, o)\n          }\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\n        })()\n      }\n      return self\n    }\n\n    /**\n     * Stops and removes the Spinner.\n     */\n  , stop: function () {\n      var el = this.el\n      if (el) {\n        clearTimeout(this.timeout)\n        if (el.parentNode) el.parentNode.removeChild(el)\n        this.el = undefined\n      }\n      return this\n    }\n\n    /**\n     * Internal method that draws the individual lines. Will be overwritten\n     * in VML fallback mode below.\n     */\n  , lines: function (el, o) {\n      var i = 0\n        , start = (o.lines - 1) * (1 - o.direction) / 2\n        , seg\n\n      function fill (color, shadow) {\n        return css(createEl(), {\n          position: 'absolute'\n        , width: o.scale * (o.length + o.width) + 'px'\n        , height: o.scale * o.width + 'px'\n        , background: color\n        , boxShadow: shadow\n        , transformOrigin: 'left'\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)'\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\n        })\n      }\n\n      for (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute'\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\n        , opacity: o.opacity\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })\n\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\n      }\n      return el\n    }\n\n    /**\n     * Internal method that adjusts the opacity of a single line.\n     * Will be overwritten in VML fallback mode below.\n     */\n  , opacity: function (el, i, val) {\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\n    }\n\n  })\n\n\n  function initVML () {\n\n    /* Utility function to create a VML tag */\n    function vml (tag, attr) {\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\n    }\n\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\n\n    Spinner.prototype.lines = function (el, o) {\n      var r = o.scale * (o.length + o.width)\n        , s = o.scale * 2 * r\n\n      function grp () {\n        return css(\n          vml('group', {\n            coordsize: s + ' ' + s\n          , coordorigin: -r + ' ' + -r\n          })\n        , { width: s, height: s }\n        )\n      }\n\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\n        , i\n\n      function seg (i, dx, filter) {\n        ins(\n          g\n        , ins(\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})\n          , ins(\n              css(\n                vml('roundrect', {arcsize: o.corners})\n              , { width: r\n                , height: o.scale * o.width\n                , left: o.scale * o.radius\n                , top: -o.scale * o.width >> 1\n                , filter: filter\n                }\n              )\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        )\n      }\n\n      if (o.shadow)\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\n        }\n\n      for (i = 1; i <= o.lines; i++) seg(i)\n      return ins(el, g)\n    }\n\n    Spinner.prototype.opacity = function (el, i, val, o) {\n      var c = el.firstChild\n      o = o.shadow && o.lines || 0\n      if (c && i + o < c.childNodes.length) {\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\n        if (c) c.opacity = val\n      }\n    }\n  }\n\n  if (typeof document !== 'undefined') {\n    sheet = (function () {\n      var el = createEl('style', {type : 'text/css'})\n      ins(document.getElementsByTagName('head')[0], el)\n      return el.sheet || el.styleSheet\n    }())\n\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\n\n    if (!vendor(probe, 'transform') && probe.adj) initVML()\n    else useCssAnimations = vendor(probe, 'animation')\n  }\n\n  return Spinner\n\n}));\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/xyz:loading/loading.js\");\n\n/* Exports */\nPackage._define(\"xyz:loading\", exports, {\n  Loading: Loading\n});\n\n})();\n","servePath":"/packages/xyz_loading.js","sourceMap":{"version":3,"sources":["packages/xyz:loading/loading.js"],"names":["module","export","Loading","Spinner","watch","require","v","refreshLoading","userOptions","running","options","Object","create","lines","length","width","radius","scale","corners","color","opacity","rotate","direction","speed","trail","fps","zIndex","className","top","left","shadow","hwaccel","position","elementSelector","_","extend","spinner","start","spin","document","querySelector","stop","halt","wrapAsync","func","context","self","loadingWrapper","callback","Meteor","meteorWrapped","toWrap","call","stopLoading","refresh","keepOptions","newOptions","noOverrideGlobal","opts","clone","newLoading","configure","newOpts","args","name","methodArgs","slice","apply","pop","bind"],"mappings":"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","file":"/packages/xyz_loading.js","sourcesContent":["import Spinner from 'spin.js'\n\nexport let Loading = refreshLoading();\n\nfunction refreshLoading(userOptions) {\n  let running = 0;\n  const options = Object.create({\n            lines: 13 // The number of lines to draw\n          , length: 28 // The length of each line\n          , width: 14 // The line thickness\n          , radius: 42 // The radius of the inner circle\n          , scale: 1 // Scales overall size of the spinner\n          , corners: 1 // Corner roundness (0..1)\n          , color: '#000' // #rgb or #rrggbb or array of colors\n          , opacity: 0.25 // Opacity of the lines\n          , rotate: 0 // The rotation offset\n          , direction: 1 // 1: clockwise, -1: counterclockwise\n          , speed: 1 // Rounds per second\n          , trail: 60 // Afterglow percentage\n          , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\n          , zIndex: 2e9 // The z-index (defaults to 2000000000)\n          , className: 'spinner'  // The CSS class to assign to the spinner\n          , top: '50%' // Top position relative to parent\n          , left: '50%' // Left position relative to parent\n          , shadow: false // Whether to render a shadow\n          , hwaccel: false // Whether to use hardware acceleration\n          , position: 'absolute' // Element positioning\n\n          // options specific to this package:\n          , elementSelector: 'body' // A selector for the target of\n        });\n\n  _.extend(options, userOptions);\n\n  return {\n    options,\n\n    // The spinner is only created at the invocation of `start`,\n    // allowing the options to be modified before it is started.\n    spinner: null,\n\n    start () {\n      running++; // `running` is a closure variable\n      if (running > 1) return this;\n      if (!this.spinner) {\n        this.spinner = new Spinner(this.options).spin(\n          document.querySelector(this.options.elementSelector)\n        );\n      }\n\n      return this;\n    },\n    stop () {\n      if (!this.spinner) return this;\n\n      running--; // `running` is a closure variable\n      if (running === 0) {\n        this.halt();\n      }\n      return this;\n    },\n    wrapAsync (func, context) {\n      const self = this;\n      return function loadingWrapper(callback){\n        self.start();\n        return Meteor.wrapAsync(function meteorWrapped(toWrap){\n          func.call(this, function stopLoading (...args) {\n            self.stop();\n            toWrap(...args);\n          });\n        }, context)(callback);\n      };\n    },\n    halt () {\n      if (this.spinner) this.spinner.stop();\n      this.spinner = null;\n      running = 0; // `running` is a closure variable\n\n      return this;\n    },\n    refresh (keepOptions, newOptions, noOverrideGlobal) {\n      let opts;\n\n      if (keepOptions) {\n        opts = _.clone(this.options);\n      } else {\n        opts = {};\n      }\n      _.extend(opts, newOptions);\n\n      const newLoading = refreshLoading(opts);\n\n      if (!noOverrideGlobal) {\n        this.halt();\n\n        Loading = newLoading;\n      }\n      return newLoading;\n    },\n    configure (opts) {\n      _.extend(this.options, opts);\n      return this;\n    },\n    clone (newOpts) {\n      const opts = _.extend({ position: 'relative' }, newOpts);\n      return this.refresh(true, opts, true);\n    },\n    call (...args) {\n      const name = args[0],\n            callback = args[args.length - 1],\n            methodArgs = args.slice(1, -1);\n      return this.apply(name, methodArgs, {}, callback);\n    },\n    apply (...args) {\n      const callback = args.pop();\n      return this.wrapAsync(Meteor.apply.bind(Meteor, ...args), Meteor)(callback);\n    }\n  };\n};\n"]}}]