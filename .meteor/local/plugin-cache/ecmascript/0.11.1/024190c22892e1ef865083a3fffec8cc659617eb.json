{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/farid/Documents/Projects/Meteor/justadit/client/lib/JIC.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"client/lib/JIC.js","filename":"/Users/farid/Documents/Projects/Meteor/justadit/client/lib/JIC.js","passPerPreset":false,"envName":"development","cwd":"/Users/farid/Documents/Projects/Meteor/justadit","root":"/Users/farid/Documents/Projects/Meteor/justadit","generatorOpts":{"filename":"/Users/farid/Documents/Projects/Meteor/justadit/client/lib/JIC.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/JIC.js"}},"code":"/*!\n * JIC JavaScript Library v2.0.2\n * https://github.com/brunobar79/J-I-C/\n *\n * Copyright 2016, Bruno Barbieri\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Date: Tue Jul 11 13:13:03 2016 -0400\n */\n\n/**\n * Create the jic object.\n * @constructor\n */\nvar jic = {\n  /**\n   * Receives an Image Object (can be JPG OR PNG) and returns a new Image Object compressed\n   * @param {Image} source_img_obj The source Image Object\n   * @param {Integer} quality The output quality of Image Object\n   * @param {String} output format. Possible values are jpg and png\n   * @return {Image} result_image_obj The compressed Image Object\n   */\n  compress: function (source_img_obj, quality, output_format) {\n    var mime_type = \"image/jpeg\";\n\n    if (typeof output_format !== \"undefined\" && output_format == \"png\") {\n      mime_type = \"image/png\";\n    }\n\n    var cvs = document.createElement('canvas');\n    cvs.width = source_img_obj.naturalWidth;\n    cvs.height = source_img_obj.naturalHeight;\n    var ctx = cvs.getContext(\"2d\").drawImage(source_img_obj, 0, 0);\n    var newImageData = cvs.toDataURL(mime_type, quality / 100);\n    var result_image_obj = new Image();\n    result_image_obj.src = newImageData;\n    return result_image_obj;\n  },\n\n  /**\n   * Receives an Image Object and upload it to the server via ajax\n   * @param {Image} compressed_img_obj The Compressed Image Object\n   * @param {String} The server side url to send the POST request\n   * @param {String} file_input_name The name of the input that the server will receive with the file\n   * @param {String} filename The name of the file that will be sent to the server\n   * @param {function} successCallback The callback to trigger when the upload is succesful.\n   * @param {function} (OPTIONAL) errorCallback The callback to trigger when the upload failed.\n  * @param {function} (OPTIONAL) duringCallback The callback called to be notified about the image's upload progress.\n  * @param {Object} (OPTIONAL) customHeaders An object representing key-value  properties to inject to the request header.\n   */\n  upload: function (compressed_img_obj, upload_url, file_input_name, filename, successCallback, errorCallback, duringCallback, customHeaders) {\n    //ADD sendAsBinary compatibilty to older browsers\n    if (XMLHttpRequest.prototype.sendAsBinary === undefined) {\n      XMLHttpRequest.prototype.sendAsBinary = function (string) {\n        var bytes = Array.prototype.map.call(string, function (c) {\n          return c.charCodeAt(0) & 0xff;\n        });\n        this.send(new Uint8Array(bytes).buffer);\n      };\n    }\n\n    var type = \"image/jpeg\";\n\n    if (filename.substr(-4).toLowerCase() == \".png\") {\n      type = \"image/png\";\n    }\n\n    var data = compressed_img_obj.src;\n    data = data.replace('data:' + type + ';base64,', '');\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', upload_url, true);\n    var boundary = 'someboundary';\n    xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary); // Set custom request headers if customHeaders parameter is provided\n\n    if (customHeaders && typeof customHeaders === \"object\") {\n      for (var headerKey in customHeaders) {\n        xhr.setRequestHeader(headerKey, customHeaders[headerKey]);\n      }\n    } // If a duringCallback function is set as a parameter, call that to notify about the upload progress\n\n\n    if (duringCallback && duringCallback instanceof Function) {\n      xhr.upload.onprogress = function (evt) {\n        if (evt.lengthComputable) {\n          duringCallback(evt.loaded / evt.total * 100);\n        }\n      };\n    }\n\n    xhr.sendAsBinary(['--' + boundary, 'Content-Disposition: form-data; name=\"' + file_input_name + '\"; filename=\"' + filename + '\"', 'Content-Type: ' + type, '', atob(data), '--' + boundary + '--'].join('\\r\\n'));\n\n    xhr.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.status == 200) {\n          successCallback(this.responseText);\n        } else if (this.status >= 400) {\n          if (errorCallback && errorCallback instanceof Function) {\n            errorCallback(this.responseText);\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["client/lib/JIC.js"],"names":["jic","compress","source_img_obj","quality","output_format","mime_type","cvs","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","newImageData","toDataURL","result_image_obj","Image","src","upload","compressed_img_obj","upload_url","file_input_name","filename","successCallback","errorCallback","duringCallback","customHeaders","XMLHttpRequest","prototype","sendAsBinary","undefined","string","bytes","Array","map","call","c","charCodeAt","send","Uint8Array","buffer","type","substr","toLowerCase","data","replace","xhr","open","boundary","setRequestHeader","headerKey","Function","onprogress","evt","lengthComputable","loaded","total","atob","join","onreadystatechange","readyState","status","responseText"],"mappings":"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","sourcesContent":["/*!\n * JIC JavaScript Library v2.0.2\n * https://github.com/brunobar79/J-I-C/\n *\n * Copyright 2016, Bruno Barbieri\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Date: Tue Jul 11 13:13:03 2016 -0400\n */\n\n\n\n/**\n * Create the jic object.\n * @constructor\n */\n\nvar jic = {\n        /**\n         * Receives an Image Object (can be JPG OR PNG) and returns a new Image Object compressed\n         * @param {Image} source_img_obj The source Image Object\n         * @param {Integer} quality The output quality of Image Object\n         * @param {String} output format. Possible values are jpg and png\n         * @return {Image} result_image_obj The compressed Image Object\n         */\n\n        compress: function(source_img_obj, quality, output_format){\n             \n             var mime_type = \"image/jpeg\";\n             if(typeof output_format !== \"undefined\" && output_format==\"png\"){\n                mime_type = \"image/png\";\n             }\n             \n\n             var cvs = document.createElement('canvas');\n             cvs.width = source_img_obj.naturalWidth;\n             cvs.height = source_img_obj.naturalHeight;\n             var ctx = cvs.getContext(\"2d\").drawImage(source_img_obj, 0, 0);\n             var newImageData = cvs.toDataURL(mime_type, quality/100);\n             var result_image_obj = new Image();\n             result_image_obj.src = newImageData;\n             return result_image_obj;\n        },\n\n        /**\n         * Receives an Image Object and upload it to the server via ajax\n         * @param {Image} compressed_img_obj The Compressed Image Object\n         * @param {String} The server side url to send the POST request\n         * @param {String} file_input_name The name of the input that the server will receive with the file\n         * @param {String} filename The name of the file that will be sent to the server\n         * @param {function} successCallback The callback to trigger when the upload is succesful.\n         * @param {function} (OPTIONAL) errorCallback The callback to trigger when the upload failed.\n\t     * @param {function} (OPTIONAL) duringCallback The callback called to be notified about the image's upload progress.\n\t     * @param {Object} (OPTIONAL) customHeaders An object representing key-value  properties to inject to the request header.\n         */\n\n        upload: function(compressed_img_obj, upload_url, file_input_name, filename, successCallback, errorCallback, duringCallback, customHeaders){\n\n            //ADD sendAsBinary compatibilty to older browsers\n            if (XMLHttpRequest.prototype.sendAsBinary === undefined) {\n                XMLHttpRequest.prototype.sendAsBinary = function(string) {\n                    var bytes = Array.prototype.map.call(string, function(c) {\n                        return c.charCodeAt(0) & 0xff;\n                    });\n                    this.send(new Uint8Array(bytes).buffer);\n                };\n            }\n\n            var type = \"image/jpeg\";\n            if(filename.substr(-4).toLowerCase()==\".png\"){\n                type = \"image/png\";\n            }\n\n            var data = compressed_img_obj.src;\n            data = data.replace('data:' + type + ';base64,', '');\n            \n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', upload_url, true);\n            var boundary = 'someboundary';\n\n            xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);\n\t\t\n\t\t// Set custom request headers if customHeaders parameter is provided\n\t\tif (customHeaders && typeof customHeaders === \"object\") {\n\t\t\tfor (var headerKey in customHeaders){\n\t\t\t\txhr.setRequestHeader(headerKey, customHeaders[headerKey]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If a duringCallback function is set as a parameter, call that to notify about the upload progress\n\t\tif (duringCallback && duringCallback instanceof Function) {\n\t\t\txhr.upload.onprogress = function (evt) {\n\t\t\t\tif (evt.lengthComputable) {  \n\t\t\t\t\tduringCallback ((evt.loaded / evt.total)*100);  \n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n            xhr.sendAsBinary(['--' + boundary, 'Content-Disposition: form-data; name=\"' + file_input_name + '\"; filename=\"' + filename + '\"', 'Content-Type: ' + type, '', atob(data), '--' + boundary + '--'].join('\\r\\n'));\n            \n            xhr.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4){\n\t\t\t\tif (this.status == 200) {\n\t\t\t\t\tsuccessCallback(this.responseText);\n\t\t\t\t}else if (this.status >= 400) {\n\t\t\t\t\tif (errorCallback &&  errorCallback instanceof Function) {\n\t\t\t\t\t\terrorCallback(this.responseText);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            };\n\n\n        }\n};\n"]},"sourceType":"script","hash":"024190c22892e1ef865083a3fffec8cc659617eb"}
