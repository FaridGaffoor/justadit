[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/percolate_wireframing/packages/percolate_wireframing.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/percolate:wireframing/template.placeholder.js                                                         //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n                                                                                                                  // 1\nTemplate.__checkName(\"placeholder\");                                                                              // 2\nTemplate[\"placeholder\"] = new Template(\"Template.placeholder\", (function() {                                      // 3\n  var view = this;                                                                                                // 4\n  return HTML.DIV({                                                                                               // 5\n    \"class\": function() {                                                                                         // 6\n      return [ \"placeholder \", Spacebars.mustache(view.lookup(\"name\")) ];                                         // 7\n    },                                                                                                            // 8\n    style: function() {                                                                                           // 9\n      return Spacebars.mustache(view.lookup(\"style\"));                                                            // 10\n    }                                                                                                             // 11\n  }, \"\\n    \", Blaze.View(function() {                                                                            // 12\n    return Spacebars.mustache(view.lookup(\"name\"));                                                               // 13\n  }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                    // 14\n    return Spacebars.include(function() {                                                                         // 15\n      return Spacebars.call(view.templateContentBlock);                                                           // 16\n    });                                                                                                           // 17\n  }), \"\\n  \");                                                                                                    // 18\n}));                                                                                                              // 19\n                                                                                                                  // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/percolate:wireframing/placeholder.js                                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n/* A simple template for rendering placeholders for design implementation                                         // 1\n * Usage:                                                                                                         // 2\n *   {{> placeholder 'foobar'}} or {{> placeholder name='foobar'}}                                                // 3\n *                                                                                                                // 4\n * To give the placeholder a min-height of UNIT * height, do:                                                     // 5\n *   {{> placeholder name='foobar' height=3}}                                                                     // 6\n */                                                                                                               // 7\n                                                                                                                  // 8\nvar UNIT = 20;                                                                                                    // 9\n                                                                                                                  // 10\nfunction getName(context) {                                                                                       // 11\n  return context.name || context;                                                                                 // 12\n}                                                                                                                 // 13\n                                                                                                                  // 14\nfunction getHeight(context) {                                                                                     // 15\n  return context.height || 1;                                                                                     // 16\n}                                                                                                                 // 17\n                                                                                                                  // 18\nTemplate.placeholder.helpers({                                                                                    // 19\n  name: function() {                                                                                              // 20\n    return getName(this);                                                                                         // 21\n  },                                                                                                              // 22\n  style: function() {                                                                                             // 23\n    var bgColor = stringToColour(getName(this));                                                                  // 24\n    var color = isDark(bgColor) ? 'white' : 'black';                                                              // 25\n                                                                                                                  // 26\n    return 'background-color: ' + bgColor + ';'                                                                   // 27\n      + 'color: ' + color + ';'                                                                                   // 28\n      + 'min-height: ' + getHeight(this) * UNIT + 'px;'                                                           // 29\n      + 'min-width:' + UNIT + 'px;'                                                                               // 30\n      + 'text-align: center';                                                                                     // 31\n  }                                                                                                               // 32\n})                                                                                                                // 33\n                                                                                                                  // 34\n// from: http://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript // 35\nvar stringToColour = function(str) {                                                                              // 36\n                                                                                                                  // 37\n    // str to hash                                                                                                // 38\n    for (var i = 0, hash = 0; i < str.length; hash = str.charCodeAt(i++) + ((hash << 5) - hash));                 // 39\n                                                                                                                  // 40\n    // int/hash to hex                                                                                            // 41\n    for (var i = 0, colour = \"#\"; i < 3; colour += (\"00\" + ((hash >> i++ * 8) & 0xFF).toString(16)).slice(-2));   // 42\n                                                                                                                  // 43\n    return colour;                                                                                                // 44\n}                                                                                                                 // 45\n                                                                                                                  // 46\nvar isDark = function(rgb) {                                                                                      // 47\n  var r = parseInt(rgb.slice(1, 3));                                                                              // 48\n  var g = parseInt(rgb.slice(3, 5));                                                                              // 49\n  var b = parseInt(rgb.slice(3, 7));                                                                              // 50\n                                                                                                                  // 51\n  var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html                                    // 52\n    0.299 * (r * r) +                                                                                             // 53\n    0.587 * (g * g) +                                                                                             // 54\n    0.114 * (b * b)                                                                                               // 55\n  );                                                                                                              // 56\n                                                                                                                  // 57\n  if (hsp > 127.5) {                                                                                              // 58\n    return true;                                                                                                  // 59\n  }                                                                                                               // 60\n                                                                                                                  // 61\n  return false;                                                                                                   // 62\n}                                                                                                                 // 63\n                                                                                                                  // 64\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"percolate:wireframing\");\n\n})();\n","servePath":"/packages/percolate_wireframing.js"}]