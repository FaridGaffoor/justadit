{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/farid/Documents/Projects/Meteor/justadit/lib/activities.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"lib/activities.js","filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/activities.js","passPerPreset":false,"envName":"development","cwd":"/Users/farid/Documents/Projects/Meteor/justadit","root":"/Users/farid/Documents/Projects/Meteor/justadit","generatorOpts":{"filename":"/Users/farid/Documents/Projects/Meteor/justadit/lib/activities.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/activities.js"}},"code":"Activities = new Mongo.Collection('activities');\nActivities.allow({\n  insert: function (userId, doc) {\n    return doc.userId === userId;\n  }\n});\n\nActivities.latest = function () {\n  return Activities.find({}, {\n    sort: {\n      date: -1\n    },\n    limit: 1\n  });\n};\n\nMeteor.methods({\n  createActivity: function (activity, tweet, loc) {\n    check(Meteor.userId(), String);\n    check(activity, {\n      recipeName: String,\n      text: String,\n      image: String\n    });\n    check(tweet, Boolean);\n    check(loc, Match.OneOf(Object, null));\n    activity.userId = Meteor.userId();\n    activity.userAvatar = Meteor.user().services.twitter.profile_image_url_https;\n    activity.userName = Meteor.user().profile.name;\n    activity.date = new Date();\n    if (!this.isSimulation && loc) activity.place = getLocationPlace(loc);\n    var id = Activities.insert(activity);\n    if (!this.isSimulation && tweet) tweetActivity(activity);\n    return id;\n  }\n});\n\nif (Meteor.isServer) {\n  var twitterOauth = function (options) {\n    var config = Meteor.settings.twitter;\n    var userConfig = Meteor.user().services.twitter;\n    return {\n      consumer_key: config.consumerKey,\n      consumer_secret: config.secret,\n      token: userConfig.accessToken,\n      token_secret: userConfig.accessTokenSecret\n    };\n  };\n\n  var tweetActivity = function (activity) {\n    // creates the tweet text, optionally truncating to fit the appended text\n    function appendTweet(text, append) {\n      var MAX = 117; // Max size of tweet with image attached\n\n      if ((text + append).length > MAX) return text.substring(0, MAX - append.length - 3) + '...' + append;else return text + append;\n    } // we need to strip the \"data:image/jpeg;base64,\" bit off the data url\n\n\n    var image = activity.image.replace(/^data.*base64,/, '');\n    var response = HTTP.post('https://upload.twitter.com/1.1/media/upload.json', {\n      params: {\n        media: image\n      },\n      npmRequestOptions: {\n        oauth: twitterOauth()\n      }\n    });\n    if (response.statusCode !== 200) throw new Meteor.Error(500, 'Unable to post image to twitter');\n    if (!response.data) throw new Meteor.Error(500, 'Did not receive attachment from twitter');\n    var attachment = response.data;\n    response = HTTP.post('https://api.twitter.com/1.1/statuses/update.json', {\n      params: {\n        status: appendTweet(activity.text, ' #localmarket'),\n        media_ids: attachment.media_id_string\n      },\n      npmRequestOptions: {\n        oauth: twitterOauth()\n      }\n    });\n    if (response.statusCode !== 200) throw new Meteor.Error(500, 'Unable to create tweet');\n  };\n\n  var getLocationPlace = function (loc) {\n    var url = 'https://api.twitter.com/1.1/geo/reverse_geocode.json' + '?granularity=neighborhood' + '&max_results=1' + '&accuracy=' + loc.coords.accuracy + '&lat=' + loc.coords.latitude + '&long=' + loc.coords.longitude;\n    var response = HTTP.get(url, {\n      npmRequestOptions: {\n        oauth: twitterOauth()\n      }\n    });\n\n    if (response.statusCode === 200 && response.data) {\n      var place = _.find(response.data.result.places, function (place) {\n        return place.place_type === 'neighborhood';\n      });\n\n      return place && place.full_name;\n    }\n  };\n} // Initialize a seed activity\n\n\nMeteor.startup(function () {\n  if (Meteor.isServer && Activities.find().count() === 0) {\n    Activities.insert({\n      recipeName: 'summer-apricots-honey-panna-cotta',\n      text: 'I substituted strawberries for apricots - incredible!',\n      image: '/img/activity/activity-placeholder-strawberry-640x640.jpg',\n      userAvatar: 'https://avatars3.githubusercontent.com/u/204768?v=2&s=400',\n      userName: 'Matt Debergalis',\n      place: 'SoMA, San Francisco',\n      date: new Date()\n    });\n  }\n});","map":{"version":3,"sources":["lib/activities.js"],"names":["Activities","Mongo","Collection","allow","insert","userId","doc","latest","find","sort","date","limit","Meteor","methods","createActivity","activity","tweet","loc","check","String","recipeName","text","image","Boolean","Match","OneOf","Object","userAvatar","user","services","twitter","profile_image_url_https","userName","profile","name","Date","isSimulation","place","getLocationPlace","id","tweetActivity","isServer","twitterOauth","options","config","settings","userConfig","consumer_key","consumerKey","consumer_secret","secret","token","accessToken","token_secret","accessTokenSecret","appendTweet","append","MAX","length","substring","replace","response","HTTP","post","params","media","npmRequestOptions","oauth","statusCode","Error","data","attachment","status","media_ids","media_id_string","url","coords","accuracy","latitude","longitude","get","_","result","places","place_type","full_name","startup","count"],"mappings":"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","sourcesContent":["Activities = new Mongo.Collection('activities');\n\nActivities.allow({\n  insert: function(userId, doc) {\n    return doc.userId === userId;\n  }\n});\n\nActivities.latest = function() {\n  return Activities.find({}, {sort: {date: -1}, limit: 1});\n}\n\nMeteor.methods({\n  createActivity: function(activity, tweet, loc) {\n    check(Meteor.userId(), String);\n    check(activity, {\n      recipeName: String,\n      text: String,\n      image: String\n    });\n    check(tweet, Boolean);\n    check(loc, Match.OneOf(Object, null));\n    \n    activity.userId = Meteor.userId();\n    activity.userAvatar = Meteor.user().services.twitter.profile_image_url_https;\n    activity.userName = Meteor.user().profile.name;\n    activity.date = new Date;\n    \n    if (! this.isSimulation && loc)\n      activity.place = getLocationPlace(loc);\n    \n    var id = Activities.insert(activity);\n    \n    if (! this.isSimulation && tweet)\n      tweetActivity(activity);\n    \n    return id;\n  }\n});\n\nif (Meteor.isServer) {\n  var twitterOauth = function(options) {\n    var config = Meteor.settings.twitter\n    var userConfig = Meteor.user().services.twitter;\n\n    return {\n      consumer_key: config.consumerKey,\n      consumer_secret: config.secret,\n      token: userConfig.accessToken,\n      token_secret: userConfig.accessTokenSecret\n    };\n  }\n  \n  var tweetActivity = function(activity) {\n    // creates the tweet text, optionally truncating to fit the appended text\n    function appendTweet(text, append) {\n      var MAX = 117; // Max size of tweet with image attached\n      \n      if ((text + append).length > MAX)\n        return text.substring(0, (MAX - append.length - 3)) + '...' + append;\n      else\n        return text + append;\n    }\n    \n    // we need to strip the \"data:image/jpeg;base64,\" bit off the data url\n    var image = activity.image.replace(/^data.*base64,/, '');\n\n    var response = HTTP.post(\n      'https://upload.twitter.com/1.1/media/upload.json', {\n        params: { media: image },\n        npmRequestOptions: { oauth: twitterOauth() }\n      }\n    );\n    \n    if (response.statusCode !== 200)\n      throw new Meteor.Error(500, 'Unable to post image to twitter');\n\n    if (! response.data)\n      throw new Meteor.Error(500, 'Did not receive attachment from twitter');\n\n    var attachment = response.data;\n\n    response = HTTP.post(\n      'https://api.twitter.com/1.1/statuses/update.json', {\n        params: {\n          status: appendTweet(activity.text, ' #localmarket'),\n          media_ids: attachment.media_id_string\n        },\n        npmRequestOptions: { oauth: twitterOauth() }\n      }\n    );\n\n    if (response.statusCode !== 200)\n      throw new Meteor.Error(500, 'Unable to create tweet');\n  }\n  \n  var getLocationPlace = function(loc) {\n    var url = 'https://api.twitter.com/1.1/geo/reverse_geocode.json'\n      + '?granularity=neighborhood'\n      + '&max_results=1'\n      + '&accuracy=' + loc.coords.accuracy\n      + '&lat=' + loc.coords.latitude\n      + '&long=' + loc.coords.longitude;\n    \n    var response = HTTP.get(url,\n                            {npmRequestOptions: { oauth: twitterOauth() } });\n\n    if (response.statusCode === 200 && response.data) {\n      var place = _.find(response.data.result.places, function(place) {\n        return place.place_type === 'neighborhood';\n      });\n      \n      return place && place.full_name;\n    }\n  }\n}\n\n// Initialize a seed activity\nMeteor.startup(function() {\n  if (Meteor.isServer && Activities.find().count() === 0) {\n    Activities.insert({\n      recipeName: 'summer-apricots-honey-panna-cotta',\n      text: 'I substituted strawberries for apricots - incredible!',\n      image: '/img/activity/activity-placeholder-strawberry-640x640.jpg',\n      userAvatar: 'https://avatars3.githubusercontent.com/u/204768?v=2&s=400',\n      userName: 'Matt Debergalis',\n      place: 'SoMA, San Francisco',\n      date: new Date\n    });\n  }\n});\n\n"]},"sourceType":"script","hash":"f9ae25ebc3df8c0e27fd383450109daa6195fd94"}
