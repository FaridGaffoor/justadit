{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n\n/*\njQuery Waypoints - v2.0.4\nCopyright (c) 2011-2014 Caleb Troughton\nDual licensed under the MIT license and GPL license.\nhttps://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt\n */\nvar indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n  slice = [].slice;\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    return define('waypoints', ['jquery'], function($) {\n      return factory($, root);\n    });\n  } else {\n    return factory(root.jQuery, root);\n  }\n})(this, function($, window) {\n  var $w, Context, Waypoint, allWaypoints, contextCounter, contextKey, contexts, isTouch, jQMethods, methods, resizeEvent, scrollEvent, waypointCounter, waypointKey, wp, wps;\n  $w = $(window);\n  isTouch = indexOf.call(window, 'ontouchstart') >= 0;\n  allWaypoints = {\n    horizontal: {},\n    vertical: {}\n  };\n  contextCounter = 1;\n  contexts = {};\n  contextKey = 'waypoints-context-id';\n  resizeEvent = 'resize.waypoints';\n  scrollEvent = 'scroll.waypoints';\n  waypointCounter = 1;\n  waypointKey = 'waypoints-waypoint-ids';\n  wp = 'waypoint';\n  wps = 'waypoints';\n  Context = (function() {\n    function Context($element) {\n      this.$element = $element;\n      this.element = $element[0];\n      this.didResize = false;\n      this.didScroll = false;\n      this.id = 'context' + contextCounter++;\n      this.oldScroll = {\n        x: $element.scrollLeft(),\n        y: $element.scrollTop()\n      };\n      this.waypoints = {\n        horizontal: {},\n        vertical: {}\n      };\n      this.element[contextKey] = this.id;\n      contexts[this.id] = this;\n      $element.bind(scrollEvent, (function(_this) {\n        return function() {\n          var scrollHandler;\n          if (!(_this.didScroll || isTouch)) {\n            _this.didScroll = true;\n            scrollHandler = function() {\n              _this.doScroll();\n              return _this.didScroll = false;\n            };\n            return window.setTimeout(scrollHandler, $[wps].settings.scrollThrottle);\n          }\n        };\n      })(this));\n      $element.bind(resizeEvent, (function(_this) {\n        return function() {\n          var resizeHandler;\n          if (!_this.didResize) {\n            _this.didResize = true;\n            resizeHandler = function() {\n              $[wps]('refresh');\n              return _this.didResize = false;\n            };\n            return window.setTimeout(resizeHandler, $[wps].settings.resizeThrottle);\n          }\n        };\n      })(this));\n    }\n\n    Context.prototype.doScroll = function() {\n      var axes;\n      axes = {\n        horizontal: {\n          newScroll: this.$element.scrollLeft(),\n          oldScroll: this.oldScroll.x,\n          forward: 'right',\n          backward: 'left'\n        },\n        vertical: {\n          newScroll: this.$element.scrollTop(),\n          oldScroll: this.oldScroll.y,\n          forward: 'down',\n          backward: 'up'\n        }\n      };\n      if (isTouch && (!axes.vertical.oldScroll || !axes.vertical.newScroll)) {\n        $[wps]('refresh');\n      }\n      $.each(axes, (function(_this) {\n        return function(aKey, axis) {\n          var direction, isForward, triggered;\n          triggered = [];\n          isForward = axis.newScroll > axis.oldScroll;\n          direction = isForward ? axis.forward : axis.backward;\n          $.each(_this.waypoints[aKey], function(wKey, waypoint) {\n            var ref, ref1;\n            if ((axis.oldScroll < (ref = waypoint.offset) && ref <= axis.newScroll)) {\n              return triggered.push(waypoint);\n            } else if ((axis.newScroll < (ref1 = waypoint.offset) && ref1 <= axis.oldScroll)) {\n              return triggered.push(waypoint);\n            }\n          });\n          triggered.sort(function(a, b) {\n            return a.offset - b.offset;\n          });\n          if (!isForward) {\n            triggered.reverse();\n          }\n          return $.each(triggered, function(i, waypoint) {\n            if (waypoint.options.continuous || i === triggered.length - 1) {\n              return waypoint.trigger([direction]);\n            }\n          });\n        };\n      })(this));\n      return this.oldScroll = {\n        x: axes.horizontal.newScroll,\n        y: axes.vertical.newScroll\n      };\n    };\n\n    Context.prototype.refresh = function() {\n      var axes, cOffset, isWin;\n      isWin = $.isWindow(this.element);\n      cOffset = this.$element.offset();\n      this.doScroll();\n      axes = {\n        horizontal: {\n          contextOffset: isWin ? 0 : cOffset.left,\n          contextScroll: isWin ? 0 : this.oldScroll.x,\n          contextDimension: this.$element.width(),\n          oldScroll: this.oldScroll.x,\n          forward: 'right',\n          backward: 'left',\n          offsetProp: 'left'\n        },\n        vertical: {\n          contextOffset: isWin ? 0 : cOffset.top,\n          contextScroll: isWin ? 0 : this.oldScroll.y,\n          contextDimension: isWin ? $[wps]('viewportHeight') : this.$element.height(),\n          oldScroll: this.oldScroll.y,\n          forward: 'down',\n          backward: 'up',\n          offsetProp: 'top'\n        }\n      };\n      return $.each(axes, (function(_this) {\n        return function(aKey, axis) {\n          return $.each(_this.waypoints[aKey], function(i, waypoint) {\n            var adjustment, elementOffset, oldOffset, ref, ref1;\n            adjustment = waypoint.options.offset;\n            oldOffset = waypoint.offset;\n            elementOffset = $.isWindow(waypoint.element) ? 0 : waypoint.$element.offset()[axis.offsetProp];\n            if ($.isFunction(adjustment)) {\n              adjustment = adjustment.apply(waypoint.element);\n            } else if (typeof adjustment === 'string') {\n              adjustment = parseFloat(adjustment);\n              if (waypoint.options.offset.indexOf('%') > -1) {\n                adjustment = Math.ceil(axis.contextDimension * adjustment / 100);\n              }\n            }\n            waypoint.offset = elementOffset - axis.contextOffset + axis.contextScroll - adjustment;\n            if ((waypoint.options.onlyOnScroll && (oldOffset != null)) || !waypoint.enabled) {\n              return;\n            }\n            if (oldOffset !== null && (oldOffset < (ref = axis.oldScroll) && ref <= waypoint.offset)) {\n              return waypoint.trigger([axis.backward]);\n            } else if (oldOffset !== null && (oldOffset > (ref1 = axis.oldScroll) && ref1 >= waypoint.offset)) {\n              return waypoint.trigger([axis.forward]);\n            } else if (oldOffset === null && axis.oldScroll >= waypoint.offset) {\n              return waypoint.trigger([axis.forward]);\n            }\n          });\n        };\n      })(this));\n    };\n\n    Context.prototype.checkEmpty = function() {\n      if ($.isEmptyObject(this.waypoints.horizontal) && $.isEmptyObject(this.waypoints.vertical)) {\n        this.$element.unbind([resizeEvent, scrollEvent].join(' '));\n        return delete contexts[this.id];\n      }\n    };\n\n    return Context;\n\n  })();\n  Waypoint = (function() {\n    function Waypoint($element, context, options) {\n      var idList, ref;\n      options = $.extend({}, $.fn[wp].defaults, options);\n      if (options.offset === 'bottom-in-view') {\n        options.offset = function() {\n          var contextHeight;\n          contextHeight = $[wps]('viewportHeight');\n          if (!$.isWindow(context.element)) {\n            contextHeight = context.$element.height();\n          }\n          return contextHeight - $(this).outerHeight();\n        };\n      }\n      this.$element = $element;\n      this.element = $element[0];\n      this.axis = options.horizontal ? 'horizontal' : 'vertical';\n      this.callback = options.handler;\n      this.context = context;\n      this.enabled = options.enabled;\n      this.id = 'waypoints' + waypointCounter++;\n      this.offset = null;\n      this.options = options;\n      context.waypoints[this.axis][this.id] = this;\n      allWaypoints[this.axis][this.id] = this;\n      idList = (ref = this.element[waypointKey]) != null ? ref : [];\n      idList.push(this.id);\n      this.element[waypointKey] = idList;\n    }\n\n    Waypoint.prototype.trigger = function(args) {\n      if (!this.enabled) {\n        return;\n      }\n      if (this.callback != null) {\n        this.callback.apply(this.element, args);\n      }\n      if (this.options.triggerOnce) {\n        return this.destroy();\n      }\n    };\n\n    Waypoint.prototype.disable = function() {\n      return this.enabled = false;\n    };\n\n    Waypoint.prototype.enable = function() {\n      this.context.refresh();\n      return this.enabled = true;\n    };\n\n    Waypoint.prototype.destroy = function() {\n      delete allWaypoints[this.axis][this.id];\n      delete this.context.waypoints[this.axis][this.id];\n      return this.context.checkEmpty();\n    };\n\n    Waypoint.getWaypointsByElement = function(element) {\n      var all, ids;\n      ids = element[waypointKey];\n      if (!ids) {\n        return [];\n      }\n      all = $.extend({}, allWaypoints.horizontal, allWaypoints.vertical);\n      return $.map(ids, function(id) {\n        return all[id];\n      });\n    };\n\n    return Waypoint;\n\n  })();\n  methods = {\n    init: function(f, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (options.handler == null) {\n        options.handler = f;\n      }\n      this.each(function() {\n        var $this, context, contextElement, ref;\n        $this = $(this);\n        contextElement = (ref = options.context) != null ? ref : $.fn[wp].defaults.context;\n        if (!$.isWindow(contextElement)) {\n          contextElement = $this.closest(contextElement);\n        }\n        contextElement = $(contextElement);\n        context = contexts[contextElement[0][contextKey]];\n        if (!context) {\n          context = new Context(contextElement);\n        }\n        return new Waypoint($this, context, options);\n      });\n      $[wps]('refresh');\n      return this;\n    },\n    disable: function() {\n      return methods._invoke.call(this, 'disable');\n    },\n    enable: function() {\n      return methods._invoke.call(this, 'enable');\n    },\n    destroy: function() {\n      return methods._invoke.call(this, 'destroy');\n    },\n    prev: function(axis, selector) {\n      return methods._traverse.call(this, axis, selector, function(stack, index, waypoints) {\n        if (index > 0) {\n          return stack.push(waypoints[index - 1]);\n        }\n      });\n    },\n    next: function(axis, selector) {\n      return methods._traverse.call(this, axis, selector, function(stack, index, waypoints) {\n        if (index < waypoints.length - 1) {\n          return stack.push(waypoints[index + 1]);\n        }\n      });\n    },\n    _traverse: function(axis, selector, push) {\n      var stack, waypoints;\n      if (axis == null) {\n        axis = 'vertical';\n      }\n      if (selector == null) {\n        selector = window;\n      }\n      waypoints = jQMethods.aggregate(selector);\n      stack = [];\n      this.each(function() {\n        var index;\n        index = $.inArray(this, waypoints[axis]);\n        return push(stack, index, waypoints[axis]);\n      });\n      return this.pushStack(stack);\n    },\n    _invoke: function(method) {\n      this.each(function() {\n        var waypoints;\n        waypoints = Waypoint.getWaypointsByElement(this);\n        return $.each(waypoints, function(i, waypoint) {\n          waypoint[method]();\n          return true;\n        });\n      });\n      return this;\n    }\n  };\n  $.fn[wp] = function() {\n    var args, method;\n    method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (methods[method]) {\n      return methods[method].apply(this, args);\n    } else if ($.isFunction(method)) {\n      return methods.init.apply(this, arguments);\n    } else if ($.isPlainObject(method)) {\n      return methods.init.apply(this, [null, method]);\n    } else if (!method) {\n      return $.error(\"jQuery Waypoints needs a callback function or handler option.\");\n    } else {\n      return $.error(\"The \" + method + \" method does not exist in jQuery Waypoints.\");\n    }\n  };\n  $.fn[wp].defaults = {\n    context: window,\n    continuous: true,\n    enabled: true,\n    horizontal: false,\n    offset: 0,\n    triggerOnce: false\n  };\n  jQMethods = {\n    refresh: function() {\n      return $.each(contexts, function(i, context) {\n        return context.refresh();\n      });\n    },\n    viewportHeight: function() {\n      var ref;\n      return (ref = window.innerHeight) != null ? ref : $w.height();\n    },\n    aggregate: function(contextSelector) {\n      var collection, ref, waypoints;\n      collection = allWaypoints;\n      if (contextSelector) {\n        collection = (ref = contexts[$(contextSelector)[0][contextKey]]) != null ? ref.waypoints : void 0;\n      }\n      if (!collection) {\n        return [];\n      }\n      waypoints = {\n        horizontal: [],\n        vertical: []\n      };\n      $.each(waypoints, function(axis, arr) {\n        $.each(collection[axis], function(key, waypoint) {\n          return arr.push(waypoint);\n        });\n        arr.sort(function(a, b) {\n          return a.offset - b.offset;\n        });\n        waypoints[axis] = $.map(arr, function(waypoint) {\n          return waypoint.element;\n        });\n        return waypoints[axis] = $.unique(waypoints[axis]);\n      });\n      return waypoints;\n    },\n    above: function(contextSelector) {\n      if (contextSelector == null) {\n        contextSelector = window;\n      }\n      return jQMethods._filter(contextSelector, 'vertical', function(context, waypoint) {\n        return waypoint.offset <= context.oldScroll.y;\n      });\n    },\n    below: function(contextSelector) {\n      if (contextSelector == null) {\n        contextSelector = window;\n      }\n      return jQMethods._filter(contextSelector, 'vertical', function(context, waypoint) {\n        return waypoint.offset > context.oldScroll.y;\n      });\n    },\n    left: function(contextSelector) {\n      if (contextSelector == null) {\n        contextSelector = window;\n      }\n      return jQMethods._filter(contextSelector, 'horizontal', function(context, waypoint) {\n        return waypoint.offset <= context.oldScroll.x;\n      });\n    },\n    right: function(contextSelector) {\n      if (contextSelector == null) {\n        contextSelector = window;\n      }\n      return jQMethods._filter(contextSelector, 'horizontal', function(context, waypoint) {\n        return waypoint.offset > context.oldScroll.x;\n      });\n    },\n    enable: function() {\n      return jQMethods._invoke('enable');\n    },\n    disable: function() {\n      return jQMethods._invoke('disable');\n    },\n    destroy: function() {\n      return jQMethods._invoke('destroy');\n    },\n    extendFn: function(methodName, f) {\n      return methods[methodName] = f;\n    },\n    _invoke: function(method) {\n      var waypoints;\n      waypoints = $.extend({}, allWaypoints.vertical, allWaypoints.horizontal);\n      return $.each(waypoints, function(key, waypoint) {\n        waypoint[method]();\n        return true;\n      });\n    },\n    _filter: function(selector, axis, test) {\n      var context, waypoints;\n      context = contexts[$(selector)[0][contextKey]];\n      if (!context) {\n        return [];\n      }\n      waypoints = [];\n      $.each(context.waypoints[axis], function(i, waypoint) {\n        if (test(context, waypoint)) {\n          return waypoints.push(waypoint);\n        }\n      });\n      waypoints.sort(function(a, b) {\n        return a.offset - b.offset;\n      });\n      return $.map(waypoints, function(waypoint) {\n        return waypoint.element;\n      });\n    }\n  };\n  $[wps] = function() {\n    var args, method;\n    method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (jQMethods[method]) {\n      return jQMethods[method].apply(null, args);\n    } else {\n      return jQMethods.aggregate.call(null, method);\n    }\n  };\n  $[wps].settings = {\n    resizeThrottle: 100,\n    scrollThrottle: 30\n  };\n  return $w.load(function() {\n    return $[wps]('refresh');\n  });\n});\n","sourceMap":{"version":3,"file":"/waypoints.coffee.js","sourceRoot":"","sources":["/packages/jquery-waypoints/waypoints.coffee"],"names":[],"mappings":"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","sourcesContent":["###\njQuery Waypoints - v2.0.4\nCopyright (c) 2011-2014 Caleb Troughton\nDual licensed under the MIT license and GPL license.\nhttps://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt\n###\n((root, factory) ->\n  if typeof define is 'function' and define.amd\n    define 'waypoints', ['jquery'], ($) ->\n      factory $, root\n  else\n    factory root.jQuery, root\n) this, ($, window) ->\n  $w = $ window\n\n  # Touch support feature test\n  isTouch = 'ontouchstart' in window\n\n  # Internal plugin-wide variables:\n\n  # - allWaypoints: A hash containing two hashes, one for vertical waypoints\n  #   and one for horizontal waypoints. In each hash they value is a Waypoint\n  #   instance and the key is that waypoint's unique ID.\n\n  # - contextCounter: A counter that is incremented with each instantiation\n  #   of the Context class, used in its unique ID.\n\n  # - contexts: A hash of all contexts. The value of each entry is a Context\n  #   instance and the key is that context's unique ID.\n\n  # - contextKey: The DOM element for each context keeps a reference to the\n  #   context's unique ID in the jQuery .data() object. This is the key for\n  #   that data entry.\n\n  # - resizeEvent: The namespaced resize event used by contexts.\n\n  # - scrollEvent: The namespaced scroll event used by contexts.\n\n  # - waypointCounter: A counter that is incremented with each instantiation\n  #   of the Waypoint class, used in its unique ID.\n\n  # - waypointKey: The DOM element for each waypoint keeps a reference to an\n  #   array of the unique IDs of all waypoints attached to that element. This\n  #   array is kept in the jQuery .data() object, and this is the key for\n  #   that entry.\n\n  # - wp: A variable shortcut for the waypoint method name on the $.fn object.\n  #   Using this variable just helps with minification.\n\n  # - wps: A variable shortcut for the waypoints method name on the $ object.\n  #   Using this variable just helps with minification.\n\n  allWaypoints = \n    horizontal: {}\n    vertical: {}\n  contextCounter = 1\n  contexts = {}\n  contextKey = 'waypoints-context-id'\n  resizeEvent = 'resize.waypoints'\n  scrollEvent = 'scroll.waypoints'\n  waypointCounter = 1\n  waypointKey = 'waypoints-waypoint-ids'\n  wp = 'waypoint'\n  wps = 'waypoints'\n\n  # Context: Represents a single scrolling element in which waypoints live.\n  # For most users there will only be one Context, the window, but users can\n  # use other scrollable elements as a context using the \"context\" option\n  # when creating waypoints.\n\n  # Properties:\n\n  # - $element: jQuery object containing the context element.\n\n  # - element: The raw HTMLNode of the context element.\n\n  # - didResize: A flag used in throttling the resize event.\n\n  # - didScroll: A flag used in throttling the scroll event.\n\n  # - id: A unique identifier for the context.\n\n  # - oldScroll: A hash containing...\n  #   - x: The context's last known horizontal scroll value.\n  #   - y: The context's last known vertical scroll value.\n\n  # - waypoints: A hash containing two hashes with all waypoints in the context.\n  #   Entries are in the same style as the allWaypoints hashes:\n  #   (key = waypoint.id, value = waypoint)\n  #   - horizontal: A hash of all horizontal waypoints.\n  #   - vertical: A hash of all vertical waypoints.\n\n  class Context\n    constructor: ($element) ->\n      @$element = $element\n      @element = $element[0]\n      @didResize = no\n      @didScroll = no\n      @id = 'context' + contextCounter++\n      @oldScroll =\n        x: $element.scrollLeft()\n        y: $element.scrollTop()\n      @waypoints =\n        horizontal: {}\n        vertical: {}\n      \n      # We need to keep a reference to this Context instance on the DOM node\n      # so we can look it up later based on the node.\n      @element[contextKey] = @id\n\n      # To do that look up, we need to have this instance in the global hash.\n      contexts[@id] = this\n\n      # Run scroll checks on scroll, but throttle it for performance reasons.\n      $element.bind scrollEvent, =>\n        unless @didScroll or isTouch\n          @didScroll = yes\n          scrollHandler = =>\n            @doScroll()\n            @didScroll = no\n          window.setTimeout scrollHandler, $[wps].settings.scrollThrottle\n\n      # Run a refresh on resize, but throttle it for performance reasons.\n      $element.bind resizeEvent, =>\n        unless @didResize\n          @didResize = yes\n          resizeHandler = =>\n            $[wps] 'refresh'\n            @didResize = no\n          window.setTimeout resizeHandler, $[wps].settings.resizeThrottle\n\n    # doScroll()\n\n    # Looks at the new scroll values for the context, compares them to the old\n    # scroll values, and checks to see if any waypoints should be triggered\n    # by that change.\n    doScroll: ->\n\n      # We use some hashes with common values for each axis so that we can\n      # just iterate over it rather than write the whole thing twice for\n      # each axis.\n      axes =\n        horizontal:\n          newScroll: @$element.scrollLeft()\n          oldScroll: @oldScroll.x\n          forward: 'right'\n          backward: 'left'\n        vertical:\n          newScroll: @$element.scrollTop()\n          oldScroll: @oldScroll.y\n          forward: 'down'\n          backward: 'up'\n\n      # This is a small \"hack\" for iOS, needed because scrolls in mobile\n      # Safari that start or end with the URL bar showing will cause window\n      # height changes without firing a resize event.\n      if isTouch and (!axes.vertical.oldScroll or !axes.vertical.newScroll)\n          $[wps] 'refresh'\n\n      # For each axis, check to see if any waypoints have been crossed.\n      # Also determine the direction it's being crossed and sort/reverse all\n      # crossed waypoints accordingly. And, of course, trigger the waypoints.\n      $.each axes, (aKey, axis) =>\n        triggered = []\n        isForward = axis.newScroll > axis.oldScroll\n        direction = if isForward then axis.forward else axis.backward\n        $.each @waypoints[aKey], (wKey, waypoint) ->\n          if axis.oldScroll < waypoint.offset <= axis.newScroll\n            triggered.push waypoint\n          else if axis.newScroll < waypoint.offset <= axis.oldScroll\n            triggered.push waypoint\n        triggered.sort (a, b) -> a.offset - b.offset\n        triggered.reverse() unless isForward\n        $.each triggered, (i, waypoint) ->\n          if waypoint.options.continuous or i is triggered.length - 1\n            waypoint.trigger [direction]\n\n      # Now that we're done with the check, the new scroll values become\n      # the old scroll values for the next check.\n      @oldScroll =\n        x: axes.horizontal.newScroll\n        y: axes.vertical.newScroll\n\n    # refresh()\n    # Runs through all of the waypoints in the context and recalculates\n    # their offsets (the scroll value at which the waypoint is triggered.)\n    # If a change in offset also happens to cross the context's current\n    # scroll value, the waypoint will be triggered in the appropriate direction\n    # unless prevented by the \"onlyOnScroll\" waypoint option.\n    refresh: () ->\n      isWin = $.isWindow @element\n      cOffset = @$element.offset()\n\n      # Make sure we have the most up-to-date scroll values for our context.\n      @doScroll()\n\n      # Each axis recalculation needs to know some things:\n\n      # - contextOffset: The distance between the edge of the document and\n      #   the context element.\n      \n      # - contextScroll: The scroll value of the context. However, if the\n      #   context is the window this needs to be 0 because this value only\n      #   comes into play when used in adjustment calculations for non-window\n      #   context waypoints.\n\n      # - contextDimension: Width or height of the context.\n\n      # - oldScroll: The scroll value of the context. Unlike \"contextScroll\",\n      #   this is the same no matter the type of context, and is used when\n      #   determining whether a newly added waypoint should immediately fire\n      #   on its first offset calculation.\n\n      # - forward: Direction string passed to forward waypoint triggers.\n\n      # - backward: Direction string passed to backward waypoint triggers.\n\n      # - offsetProp: Key of the .offset() object for this axis.\n      axes =\n        horizontal:\n          contextOffset: if isWin then 0 else cOffset.left\n          contextScroll: if isWin then 0 else @oldScroll.x\n          contextDimension: @$element.width()\n          oldScroll: @oldScroll.x\n          forward: 'right'\n          backward: 'left'\n          offsetProp: 'left'\n        vertical:\n          contextOffset: if isWin then 0 else cOffset.top\n          contextScroll: if isWin then 0 else @oldScroll.y\n          contextDimension: if isWin then $[wps]('viewportHeight') else \\\n            @$element.height()\n          oldScroll: @oldScroll.y\n          forward: 'down'\n          backward: 'up'\n          offsetProp: 'top'\n\n      # For each axis, run through the waypoints. Store the old offset.\n      # Recalculate the new offset. Check the difference against the context's\n      # current scroll value and trigger any crossed waypoints accordingly.\n      $.each axes, (aKey, axis) =>\n        $.each @waypoints[aKey], (i, waypoint) ->\n          adjustment = waypoint.options.offset\n          oldOffset = waypoint.offset\n          elementOffset = if $.isWindow waypoint.element then 0 else \\\n            waypoint.$element.offset()[axis.offsetProp]\n\n          # The \"offset\" waypoint option (which we call \"adjustment\" here) can\n          # be a number, percentage string, keyword string (bottom-in-view),\n          # or a function. So we deal with all of these types here.\n          if $.isFunction adjustment\n            adjustment = adjustment.apply waypoint.element\n          else if typeof adjustment is 'string'\n            adjustment = parseFloat adjustment\n            if waypoint.options.offset.indexOf('%') > -1\n              adjustment = Math.ceil(axis.contextDimension * adjustment / 100)\n\n          # We've finally calculated all the crazy little adjustments that\n          # can come from using non-window contexts and the \"offset\" option.\n          # Store the damn thing.\n          waypoint.offset = elementOffset \\\n                          - axis.contextOffset \\\n                          + axis.contextScroll \\\n                          - adjustment\n\n          # \"onlyOnScroll\" tells us to not even consider triggering waypoints\n          # during refresh, so we can eject early.\n          return if (waypoint.options.onlyOnScroll and oldOffset?) or \\\n                    !waypoint.enabled\n\n          # Case where the refresh causes a backward trigger.\n          if oldOffset isnt null and \\\n            oldOffset < axis.oldScroll <= waypoint.offset\n              waypoint.trigger [axis.backward]\n\n          # Now the forward case.\n          else if oldOffset isnt null and \\\n            oldOffset > axis.oldScroll >= waypoint.offset\n              waypoint.trigger [axis.forward]\n\n          # \"oldOffset\" values of null mean this is the first calculation of\n          # the waypoint's offset. It's a special time in a waypoint's life.\n          else if oldOffset is null and axis.oldScroll >= waypoint.offset\n            waypoint.trigger [axis.forward]\n\n    # checkEmpty()\n\n    # Looks at the waypoints hashes. If they are empty, the context removes\n    # itself from the global contexts hash.\n    checkEmpty: ->\n      if $.isEmptyObject(@waypoints.horizontal) and \\\n        $.isEmptyObject(@waypoints.vertical)\n          @$element.unbind [resizeEvent, scrollEvent].join(' ')\n          delete contexts[@id]\n\n  # Waypoint: Represents a single callback function tied to an element. An\n  # element can have multiple waypoints with multiple offsets.\n\n  # Properties:\n\n  # - $element: jQuery object containing the waypoint element.\n\n  # - element: The raw HTMLNode of the waypoint element.\n\n  # - axis: 'horizontal' || 'vertical' - The axis on which this waypoint lives.\n\n  # - callback: The function that is fired when the waypoint is triggered.\n\n  # - context: A reference to the context this waypoint belongs to.\n\n  # - enabled: Boolean indicating whether this waypoint is enabled or not.\n  #   Disabled waypoints are still returned in functions that aggregate\n  #   waypoints, but do not fire their callbacks.\n\n  # - id: A unique identifier for the waypoint.\n\n  # - offset: The scroll offset at which the waypoint should trigger.\n\n  # - options: A hash containing the various waypoint options.\n  #   See $.fn.waypoint.defaults for more information on those options.\n  class Waypoint\n    constructor: ($element, context, options) ->\n      options = $.extend {}, $.fn[wp].defaults, options\n      if options.offset is 'bottom-in-view'\n        options.offset = ->\n          contextHeight = $[wps] 'viewportHeight'\n          unless $.isWindow context.element\n            contextHeight = context.$element.height()\n          contextHeight - $(this).outerHeight()\n\n      @$element = $element\n      @element = $element[0]\n      @axis = if options.horizontal then 'horizontal' else 'vertical'\n      @callback = options.handler\n      @context = context\n      @enabled = options.enabled\n      @id = 'waypoints' + waypointCounter++\n      @offset = null\n      @options = options\n\n      # Add our new waypoint to its context.\n      context.waypoints[@axis][@id] = this\n\n      # Add it to the global hash.\n      allWaypoints[@axis][@id] = this\n\n      # Add the waypoint's id to the element's waypoint id list.\n      idList = @element[waypointKey] ? []\n      idList.push @id\n      @element[waypointKey] = idList\n    \n    # trigger(array)\n\n    # Calls the waypoint's callback function, passing to it the arguments\n    # supplied in the \"args\" array.\n    trigger: (args) ->\n      return unless @enabled\n      if @callback?\n        @callback.apply @element, args\n      if @options.triggerOnce\n        @destroy()\n\n    # disable()\n\n    # Temporarily disables a waypoint from firing its callback.\n    disable: ->\n      @enabled = false\n\n    # enable()\n\n    # Breathe life back into the waypoint.\n    enable: ->\n      @context.refresh()\n      @enabled = true\n\n    # destroy()\n\n    # Kills the waypoint for good.\n    destroy: ->\n      delete allWaypoints[@axis][@id]\n      delete @context.waypoints[@axis][@id]\n      @context.checkEmpty()\n\n    # Waypoint.getWaypointsByElement(HTMLNode)\n\n    # Returns an array of all Waypoint instances attached to the \"element\"\n    # HTMLNode. Returns an empty array if there are no attached waypoints.\n    @getWaypointsByElement: (element) ->\n      ids = element[waypointKey]\n      return [] unless ids\n      all = $.extend {}, allWaypoints.horizontal, allWaypoints.vertical\n      $.map ids, (id) ->\n        all[id]\n\n  # These methods are available on the $.fn object by using the method\n  # name as the first argument to .waypoint. Ex: $('div').waypoint('destroy')\n  methods =\n\n    # init(function, object)\n\n    # Creates a new waypoint (and if needed, a new context) using the supplied\n    # callback function and options.\n\n    # The \"f\" function and the \"options\" object are both optional, but at least\n    # one must be supplied. So acceptable signatures are:\n\n    # - .waypoint(f)\n    # - .waypoint(options)\n    # - .waypoint(f, options)\n\n    # This \"init\" method should never need to be called explicity by the user.\n    # It is the default method that is delegated to when .waypoint is called\n    # with one of the above signatures.\n\n    # Ex: $('div').waypoint(function(direction) {\n    #   // Do things\n    # }, { offset: '100%' });\n    init: (f, options) ->\n      options ?= {}\n      options.handler ?= f\n\n      @each ->\n        $this = $ this\n        contextElement = options.context ? $.fn[wp].defaults.context\n        unless $.isWindow contextElement\n          contextElement = $this.closest contextElement\n        contextElement = $ contextElement\n        context = contexts[contextElement[0][contextKey]]\n        context = new Context contextElement unless context\n        new Waypoint $this, context, options\n      $[wps] 'refresh'\n      this\n\n    # Disable, enable, and destroy all just delegate to the instance methods\n    # of the waypoints attached to the subject elements.\n    disable: -> methods._invoke.call this, 'disable'\n    enable: -> methods._invoke.call this, 'enable'\n    destroy: -> methods._invoke.call this, 'destroy'\n\n    # .waypoint('prev', string, string|HTMLNode|jQuery)\n\n    # Returns a jQuery object containing previous waypoint elements. This\n    # creates a new entry in the jQuery object stack just like jQuery's prev\n    # function. \"axis\" indicates the axis on which to traverse\n    # ('horizontal' | 'vertical') and \"selector\" indicates which context\n    # element to use. The defaults are 'vertical' and window respectively.\n    prev: (axis, selector) ->\n      methods._traverse.call this, axis, selector, (stack, index, waypoints) ->\n        stack.push waypoints[index-1] if index > 0\n\n    # .waypoint('next', string, string|HTMLNode|jQuery)\n\n    # Returns a jQuery object containing next waypoint elements. This\n    # creates a new entry in the jQuery object stack just like jQuery's next\n    # function. \"axis\" indicates the axis on which to traverse\n    # ('horizontal' | 'vertical') and \"selector\" indicates which context\n    # element to use. The defaults are 'vertical' and window respectively.\n    next: (axis, selector) ->\n      methods._traverse.call this, axis, selector, (stack, index, waypoints) ->\n        stack.push waypoints[index+1] if index < waypoints.length-1\n\n    # Internal: Aggregates waypoints on a given axis of a context, and applies\n    # a \"push\" callback for each element in the subject jQuery object. This\n    # callback builds the element array to push to the jQuery stack.\n    _traverse: (axis = 'vertical', selector = window, push) ->\n      waypoints = jQMethods.aggregate selector\n      stack = []\n      @each ->\n        index = $.inArray this, waypoints[axis]\n        push stack, index, waypoints[axis]\n      @pushStack stack\n\n    # Internal: Finds all waypoints on a given set of \"$elements\" and invokes\n    # \"method\" on each instance.\n    _invoke: (method) ->\n      this.each ->\n        waypoints = Waypoint.getWaypointsByElement this\n        $.each waypoints, (i, waypoint) ->\n          waypoint[method]()\n          true\n      this\n\n  # $.fn.waypoint. Let's just hook this guy up to our methods hash and\n  # add some trivial error reporting for bogus calls.\n  $.fn[wp] = (method, args...) ->\n    if methods[method]\n      methods[method].apply this, args\n    else if $.isFunction(method)\n      methods.init.apply this, arguments\n    else if $.isPlainObject(method)\n      methods.init.apply this, [null, method]\n    else if !method\n      $.error \"jQuery Waypoints needs a callback function or handler option.\"\n    else\n      $.error \"The #{method} method does not exist in jQuery Waypoints.\"\n\n  # The default options object for a waypoint.\n\n  # - context: string|HTMLNode|jQuery - The scrollable element that the\n  #   waypoint acts within. The waypoint will look for the closest ancestor\n  #   element that matches this selector or node.\n\n  # - continuous: Multiple waypoints may be triggered by a single scroll check.\n  #   If you would like a waypoint to only trigger if it is the last waypoint\n  #   in a scroll check, set this to false.\n\n  # - enabled: Should this waypoint start enabled (true) or disabled (false)?\n\n  # - handler: This option is not defined by default, but can be used as an\n  #   alternate way to pass the waypoint callback function, rather than as\n  #   the first argument to .waypoint.\n\n  #   Ex: $('div').waypoint({\n  #     handler: function(direction) { ... }\n  #   });\n\n  # - horizontal: Set this to true if the waypoint is, well, horizontal.\n\n  # - offset: number|string|function - Determines how far from the top (or left\n  #   if the waypoint is horizontal) of the context's viewport to trigger the\n  #   waypoint. The default of 0 means that the waypoint is triggered when the\n  #   top of the waypoint element hits the top of the window/context-element.\n  #   An offset of 50 would mean the waypoint triggers when the top of the\n  #   element is 50 pixels from the top of the window.\n\n  #   A % string is translated into a percentage of the width/height of\n  #   the context.\n\n  #   If a function is passed, that function should return a number. The \"this\"\n  #   keyword within this function will be set to the raw HTMLNode of the\n  #   waypoint element.\n\n  # - triggerOnce: If true, the waypoint will destroy itself after\n  #   first trigger.\n  $.fn[wp].defaults =\n    context: window\n    continuous: true\n    enabled: true\n    horizontal: false\n    offset: 0\n    triggerOnce: false\n    \n  # These methods are available on the $ object by using the method name as\n  # the first argument to .waypoint. Ex: $.waypoints('refresh')\n  jQMethods =\n\n    # $.waypoints('refresh')\n\n    # Forces a refresh on all contexts, recalculating all waypoint offsets.\n    # This is done automatically on waypoint addition and during resize events,\n    # but if a user does something to change the DOM, CSS, or in some way\n    # change the layout of a page and its elements, they might need to call\n    # this method manually.\n    refresh: ->\n      $.each contexts, (i, context) -> context.refresh()\n    \n    # $.waypoints('viewportHeight')\n\n    # A utility method that returns the window height, but takes into account\n    # inconsistencies that come with just using jQuery's .height() on iOS.\n    viewportHeight: ->\n      window.innerHeight ? $w.height()\n\n    # $.waypoints(['aggregate'], [contextSelector])\n\n    # Returns an object containing two HTMLNode arrays, one for each axis:\n\n    # {\n    #   horizontal: [ HTMLNode... ]\n    #   vertical: [ HTMLNode... ]\n    # }\n      \n    # This is the default method used when calling $.waypoints(). If\n    # \"contextSelector\" is not supplied, it returns all waypoints. If\n    # \"contextSelector\" is supplied it only returns waypoints for that context.\n\n    # The array of waypoint elements is returned sorted by calculated offset,\n    # the order in which they would be triggered on the page.\n    aggregate: (contextSelector) ->\n      collection = allWaypoints\n      if contextSelector\n        collection = contexts[$(contextSelector)[0][contextKey]]?.waypoints\n      return [] unless collection\n      waypoints =\n        horizontal: []\n        vertical: []\n      $.each waypoints, (axis, arr) ->\n        $.each collection[axis], (key, waypoint) ->\n          arr.push waypoint\n        arr.sort (a, b) -> a.offset - b.offset\n        waypoints[axis] = $.map arr, (waypoint) -> waypoint.element\n        waypoints[axis] = $.unique waypoints[axis]\n      waypoints\n\n    # $.waypoints('above', [string|HTMLNode|jQuery])\n\n    # Returns all vertical waypoints that lie above the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    above: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'vertical', (context, waypoint) ->\n        waypoint.offset <= context.oldScroll.y\n\n    # $.waypoints('below', [string|HTMLNode|jQuery])\n\n    # Returns all vertical waypoints that lie below the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    below: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'vertical', (context, waypoint) ->\n        waypoint.offset > context.oldScroll.y\n\n    # $.waypoints('left', [string|HTMLNode|jQuery])\n\n    # Returns all horizontal waypoints left of the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    left: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'horizontal', (context, waypoint) ->\n        waypoint.offset <= context.oldScroll.x\n\n    # $.waypoints('right', [string|HTMLNode|jQuery])\n\n    # Returns all horizontal waypoints right of the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    right: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'horizontal', (context, waypoint) ->\n        waypoint.offset > context.oldScroll.x\n\n    # $.waypoints('enable/disable/destroy')\n\n    # These methods delegate to the enable/disable/destroy instance methods \n    # for all waypoints.\n    enable: -> jQMethods._invoke 'enable'\n    disable: -> jQMethods._invoke 'disable'\n    destroy: -> jQMethods._invoke 'destroy'\n\n    # $.waypoints('extendFn', string, function)\n\n    # Extends the $.fn.waypoint method object with a new method, \"f\". This\n    # just lets other modules piggyback on the .waypoint namespace.\n    extendFn: (methodName, f) ->\n      methods[methodName] = f\n\n    # Internal: Invokes \"method\" on all waypoints.\n    _invoke: (method) ->\n      waypoints = $.extend {}, allWaypoints.vertical, allWaypoints.horizontal\n      $.each waypoints, (key, waypoint) ->\n        waypoint[method]()\n        true\n\n    # Internal: Returns an array of all HTMLNodes for each waypoint that passes\n    # the \"test\" function. Only waypoints within the \"selector\" context on the\n    # \"axis\" axis are tested. As with .aggregate, the array is sorted by\n    # calculated offset (trigger order).\n    _filter: (selector, axis, test) ->\n      context = contexts[$(selector)[0][contextKey]]\n      return [] unless context\n      waypoints = []\n      $.each context.waypoints[axis], (i, waypoint) ->\n        waypoints.push waypoint if test context, waypoint\n      waypoints.sort (a, b) -> a.offset - b.offset\n      $.map waypoints, (waypoint) -> waypoint.element\n\n  # Hook up jQMethods to the $.waypoints namespace.\n  $[wps] = (method, args...) ->\n    if jQMethods[method]\n      jQMethods[method].apply null, args\n    else\n      jQMethods.aggregate.call null, method\n\n  # Plugin-wide settings:\n\n  # - resizeThrottle: For performance reasons, the refresh performed during\n  #   resizes is throttled. This value is the rate-limit in milliseconds\n  #   between resize refreshes. For more information on throttling, check out\n  #   Ben Alman’s throttle / debounce plugin.\n  #   http://benalman.com/projects/jquery-throttle-debounce-plugin/\n\n  # - scrollThrottle: For performance reasons, checking for any crossed\n  #   waypoints during a scroll event is throttled. This value is the\n  #   rate-limit in milliseconds between scroll checks. For more information\n  #   on throttling, check out Ben Alman’s throttle / debounce plugin.\n  #   http://benalman.com/projects/jquery-throttle-debounce-plugin/\n\n  $[wps].settings =\n    resizeThrottle: 100\n    scrollThrottle: 30\n\n  # Ensure a refresh on page load. Newly loaded images often shift layout.\n  $w.load -> $[wps] 'refresh'\n"]}}